{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { log } from './utils';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const importErrors = useSelector(state => state.importErrors, shallowEqual);\n  const rawProjection = useSelector(state => state.rawProjection, shallowEqual);\n  const projection = useSelector(state => state.projection, shallowEqual);\n  const view = useSelector(state => state.view, shallowEqual);\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate, shallowEqual);\n\n  const setRawProjection = value => {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  };\n\n  const importProjection = () => {\n    log('import');\n    dispatch({\n      type: 'CLEAR_IMPORT_ERRORS'\n    });\n\n    if (!rawProjection) {\n      log('import error empty textarea');\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    const validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    }); // track players, they should be unique\n\n    const players = {}; // assumes that values will not contain commas\n\n    let errors = false;\n    const formattedProjection = rawProjection.split('\\n').map(line => {\n      const [player, projection, ownership] = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t');\n\n      if (player === 'ID' || player === '') {\n        return 'REMOVE';\n      }\n\n      const result = {\n        player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        log('import error duplicate player');\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(`Duplicate player - ${player}`)\n        });\n      }\n\n      players[player] = true;\n      const validation = validationSchema.validate(result);\n\n      if (validation.error) {\n        errors = true;\n        log('import error validation error');\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    }).filter(result => result !== 'REMOVE');\n\n    if (!errors) {\n      log(`import ${formattedProjection.length} records`);\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  const exportTemplate = () => {\n    if (slates && selectedSlate) {\n      log(`export template`);\n      const {\n        players\n      } = slates[selectedSlate];\n\n      const format = player => {\n        return `${player.displayName},${player.draftableId},,50`;\n      };\n\n      const header = \"Do not copy the player name column as well as this row\\nName,ID,Projection,Ownership\\n\";\n      const csv = \"data:text/csv;charset=utf-8,\" + header + players.map(format).join('\\n');\n      const {\n        encodeURI\n      } = window;\n      const downloadLink = document.createElement(\"a\");\n      downloadLink.href = encodeURI(csv);\n      downloadLink.download = `${selectedSlate} - Projections.csv`;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }\n  };\n\n  return {\n    setRawProjection,\n    projection,\n    importErrors,\n    importProjection,\n    view,\n    exportTemplate\n  };\n};\n\nconst componentContainer = {\n  padding: 16\n};\nconst cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\nconst placeholder = `Copy and paste a csv or tab deliminated file of your own projections with desired ownership percentages.  Format each line of your csv like this:\n\nplayer id, projection, desired ownership\n\nor for a tab deliminated file, like this:\nplayer id projection  desired ownership\n`;\n\nconst ImportProjection = () => {\n  const {\n    importErrors,\n    projection,\n    setRawProjection,\n    importProjection,\n    view,\n    exportTemplate\n  } = getState();\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  const onChange = event => setRawProjection(event.target.value);\n\n  const textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n  const buttonsContainerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    paddingBottom: 24\n  };\n  const buttonContainerStyle = {\n    paddingRight: 24\n  };\n  const buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n  const infoContainer = {\n    paddingBottom: 36\n  };\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Your Projections\"), __jsx(\"div\", {\n    style: cardContainer\n  }, __jsx(Card, null, !projection && __jsx(\"div\", {\n    style: infoContainer\n  }, \"DFS Solver is a Bring Your Own Projection system.  You'll need to copy and paste your projections into the text area below. Use the Export Template button to download a sheet with proper player id's for your selected slate.\"), importErrors && !!importErrors.length && __jsx(\"div\", {\n    style: infoContainer\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Import Has Errors\"), __jsx(\"ul\", null, importErrors.map(err => __jsx(\"li\", null, err.error && err.error.toString() || err.toString())))), projection && __jsx(\"div\", {\n    style: infoContainer\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Current Projection\"), __jsx(\"div\", null, `Projections for ${projection.length} players`)), __jsx(\"div\", {\n    style: buttonsContainerStyle\n  }, __jsx(\"div\", {\n    style: buttonContainerStyle\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: importProjection,\n    color: \"primary\",\n    style: buttonStyle\n  }, \"Import Projections\")), __jsx(\"div\", {\n    style: buttonContainerStyle\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: exportTemplate,\n    color: \"secondary\",\n    style: buttonStyle\n  }, \"Export Template\"))), __jsx(TextField, {\n    id: \"standard-multiline-static\",\n    label: \"Import projections\",\n    multiline: true,\n    rows: \"28\",\n    placeholder: placeholder,\n    variant: \"outlined\",\n    style: textAreaStyle,\n    onChange: onChange\n  }))));\n};\n\nexport default ImportProjection;","map":null,"metadata":{},"sourceType":"module"}