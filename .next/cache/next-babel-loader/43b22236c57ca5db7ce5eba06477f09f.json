{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nconst initialState = {\n  slates: {},\n  importErrors: [],\n  stack: [],\n  stacks: [],\n  stackCounts: [],\n  results: [],\n  pool: [],\n  view: 'slatepicker',\n  showPoolTools: false\n};\n\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  const stackCounts = [...state.stackCounts];\n\n  switch (type) {\n    case 'SET_SLATES':\n      return _objectSpread({}, state, {\n        slates: _objectSpread({}, payload)\n      });\n\n    case 'SET_SELECTED_SLATE':\n      return _objectSpread({}, state, {\n        selectedSlate: payload\n      });\n\n    case 'CLEAR_IMPORT_ERRORS':\n      return _objectSpread({}, state, {\n        importErrors: []\n      });\n\n    case 'ADD_IMPORT_ERROR':\n      return _objectSpread({}, state, {\n        importErrors: state.importErrors.concat([payload])\n      });\n\n    case 'SET_RAW_PROJECTION':\n      return _objectSpread({}, state, {\n        rawProjection: payload\n      });\n\n    case 'SET_PROJECTION':\n      return _objectSpread({}, state, {\n        projection: payload\n      });\n\n    case 'CLEAR_STACK':\n      return _objectSpread({}, state, {\n        stack: []\n      });\n\n    case 'ADD_STACK':\n      return _objectSpread({}, state, {\n        stacks: state.stacks.concat([payload]),\n        stackCounts: state.stackCounts.concat([0])\n      });\n\n    case 'REMOVE_STACK':\n      return _objectSpread({}, state, {\n        stacks: state.stacks.filter((stack, i) => i !== payload),\n        stackCounts: state.stackCounts.filter((n, i) => i !== payload)\n      });\n\n    case 'ADD_PLAYER_TO_STACK':\n      return _objectSpread({}, state, {\n        stack: state.stack.concat([payload])\n      });\n\n    case 'REMOVE_PLAYER_FROM_STACK':\n      return _objectSpread({}, state, {\n        stack: state.stack.filter(player => player.playerId !== payload.playerId)\n      });\n\n    case 'SET_STACK_N':\n      const {\n        i,\n        n\n      } = payload;\n      stackCounts[i] = Number(n);\n      return _objectSpread({}, state, {\n        stackCounts\n      });\n\n    case 'ADD_RESULT':\n      return _objectSpread({}, state, {\n        results: state.results.concat(payload)\n      });\n\n    case 'REMOVE_RESULT':\n      return _objectSpread({}, state, {\n        results: state.results.filter((result, i) => i !== payload)\n      });\n\n    case 'ADD_PLAYER_TO_POOL':\n      return _objectSpread({}, state, {\n        pool: state.pool.concat([payload])\n      });\n\n    case 'REMOVE_PLAYER_FROM_POOL':\n      return _objectSpread({}, state, {\n        pool: state.pool.filter(player => player.playerId !== payload.playerId)\n      });\n\n    case 'SET_VIEW':\n      return _objectSpread({}, state, {\n        view: payload\n      });\n\n    case 'MOVE_STACK':\n      const {\n        j,\n        which\n      } = payload;\n      const stacks = state.stacks.concat([]);\n      const stack = stacks[j];\n\n      if (which === \"right\" && j < stacks.length - 1) {\n        const right = stacks[j + 1];\n        stacks.splice(j, 1, right);\n        stacks.splice(j + 1, 1, stack);\n      }\n\n      if (which === \"left\" && j > 0) {\n        const left = stacks[j - 1];\n        stacks.splice(j, 1, left);\n        stacks.splice(j - 1, 1, stack);\n      }\n\n      return _objectSpread({}, state, {\n        stacks,\n        stackCounts\n      });\n\n    case 'CLEAR_POOL':\n      return _objectSpread({}, state, {\n        pool: []\n      });\n\n    case 'SET_POOL_SALARY_RANGE':\n      return _objectSpread({}, state, {\n        poolSalaryRange: payload\n      });\n\n    case 'TOGGLE_POOL_TOOLS':\n      return _objectSpread({}, state, {\n        showPoolTools: !state.showPoolTools\n      });\n\n    case 'PURGE':\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst persistConfig = {\n  key: 'primary',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\nexport const initializeStore = (preloadedState = initialState) => {\n  return createStore(persistedReducer, preloadedState, composeWithDevTools(applyMiddleware()));\n};","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","persistReducer","storage","initialState","slates","importErrors","stack","stacks","stackCounts","results","pool","view","showPoolTools","reducer","state","type","payload","selectedSlate","concat","rawProjection","projection","filter","i","n","player","playerId","Number","result","j","which","length","right","splice","left","poolSalaryRange","persistConfig","key","persistedReducer","initializeStore","preloadedState"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst initialState = {\n  slates: {},\n  importErrors: [],\n  stack: [],\n  stacks: [],\n  stackCounts: [],\n  results: [],\n  pool: [],\n  view: 'slatepicker',\n  showPoolTools: false\n};\n\nconst reducer = (state = initialState, { type, payload }) => {\n\n  const stackCounts = [...state.stackCounts];\n\n  switch (type) {\n    case 'SET_SLATES':\n      return {\n        ...state,\n        slates: { ...payload }\n      };\n    case 'SET_SELECTED_SLATE':\n      return {\n        ...state,\n        selectedSlate: payload\n      };\n    case 'CLEAR_IMPORT_ERRORS':\n      return {\n        ...state,\n        importErrors: []\n      }\n    case 'ADD_IMPORT_ERROR':\n      return {\n        ...state,\n        importErrors: state.importErrors.concat([payload])\n      }\n    case 'SET_RAW_PROJECTION':\n      return {\n        ...state,\n        rawProjection: payload\n      }\n    case 'SET_PROJECTION':\n      return {\n        ...state,\n        projection: payload\n      }\n    case 'CLEAR_STACK':\n      return {\n        ...state,\n        stack: []\n      }\n    case 'ADD_STACK':\n      return {\n        ...state,\n        stacks: state.stacks.concat([payload]),\n        stackCounts: state.stackCounts.concat([0])\n      }\n    case 'REMOVE_STACK':\n      return {\n        ...state,\n        stacks: state.stacks.filter((stack, i) => i !== payload),\n        stackCounts: state.stackCounts.filter((n, i) => i !== payload)\n      }\n    case 'ADD_PLAYER_TO_STACK':\n      return {\n        ...state,\n        stack: state.stack.concat([payload])\n      }\n    case 'REMOVE_PLAYER_FROM_STACK':\n      return {\n        ...state,\n        stack: state.stack.filter((player) => player.playerId !== payload.playerId)\n      }\n    case 'SET_STACK_N':\n      const { i, n } = payload;\n      stackCounts[i] = Number(n);\n\n      return {\n        ...state,\n        stackCounts\n      }\n    case 'ADD_RESULT':\n      return {\n        ...state,\n        results: state.results.concat(payload)\n      }\n    case 'REMOVE_RESULT':\n      return {\n        ...state,\n        results: state.results.filter((result, i) => i !== payload)\n      }\n    case 'ADD_PLAYER_TO_POOL':\n      return {\n        ...state,\n        pool: state.pool.concat([payload])\n      }\n    case 'REMOVE_PLAYER_FROM_POOL':\n      return {\n        ...state,\n        pool: state.pool.filter((player) => player.playerId !== payload.playerId)\n      }\n    case 'SET_VIEW':\n      return {\n        ...state,\n        view: payload\n      }\n    case 'MOVE_STACK':\n      const { j, which } = payload;\n      const stacks = state.stacks.concat([]);\n      const stack = stacks[j];\n\n      if (which === \"right\" && j < (stacks.length - 1)) {\n        const right = stacks[j + 1];\n        stacks.splice(j, 1, right);\n        stacks.splice(j + 1, 1, stack);\n      }\n\n      if (which === \"left\" && j > 0) {\n        const left = stacks[j - 1];\n        stacks.splice(j, 1, left);\n        stacks.splice(j - 1, 1, stack);\n      }\n\n      return {\n        ...state,\n        stacks,\n        stackCounts\n      }\n    case 'CLEAR_POOL':\n      return {\n        ...state,\n        pool: []\n      }\n    case 'SET_POOL_SALARY_RANGE':\n      return {\n        ...state,\n        poolSalaryRange: payload\n      }\n    case 'TOGGLE_POOL_TOOLS':\n      return {\n        ...state,\n        showPoolTools: !state.showPoolTools\n      }\n    case 'PURGE':\n      return state\n    default:\n      return state\n  }\n};\n\nconst persistConfig = {\n  key: 'primary',\n  storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nexport const initializeStore = (preloadedState = initialState) => {\n  return createStore(\n    persistedReducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware())\n  );\n};\n"]},"metadata":{},"sourceType":"module"}