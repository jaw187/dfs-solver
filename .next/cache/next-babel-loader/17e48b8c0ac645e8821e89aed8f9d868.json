{"ast":null,"code":"var _jsxFileName = \"/Users/jwesto1/Code/jaw187/dfs-solver/components/importprojection.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const importErrors = useSelector(state => state.importErrors, shallowEqual);\n  const rawProjection = useSelector(state => state.rawProjection, shallowEqual);\n  const projection = useSelector(state => state.projection, shallowEqual);\n  const view = useSelector(state => state.view);\n\n  const setRawProjection = value => {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  };\n\n  const importProjection = () => {\n    dispatch({\n      type: 'CLEAR_IMPORT_ERRORS'\n    });\n\n    if (!rawProjection) {\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    const validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    }); // track players, they should be unique\n\n    const players = {}; // assumes that values will not contain commas\n\n    let errors = false;\n    const formattedProjection = rawProjection.split('\\n').map(line => {\n      const [player, projection, ownership] = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t');\n      const result = {\n        player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(`Duplicate player - ${player}`)\n        });\n      }\n\n      players[player] = true;\n      const validation = validationSchema.validate(result);\n\n      if (validation.error) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    });\n\n    if (!errors) {\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  return {\n    setRawProjection,\n    projection,\n    importErrors,\n    importProjection,\n    view\n  };\n};\n\nconst componentContainer = {\n  padding: 16\n};\nconst cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\nconst placeholder = `Copy and paste a csv file of your own projections with desired ownership percentages.  Format each line of your csv like this:\n\nplayer id, projection, desired ownership\n`;\n\nconst ImportProjection = () => {\n  const {\n    importErrors,\n    projection,\n    setRawProjection,\n    importProjection,\n    view\n  } = getState();\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  const onChange = event => setRawProjection(event.target.value);\n\n  const textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n  const buttonContainerStyle = {\n    paddingBottom: 24\n  };\n  const buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n  const infoContainer = {\n    paddingBottom: 36\n  };\n  return __jsx(\"div\", {\n    style: componentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Your Projections\"), __jsx(\"div\", {\n    style: cardContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, importErrors && !!importErrors.length && __jsx(\"div\", {\n    style: infoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Import Has Errors\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, importErrors.map(err => __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, err.error && err.error.toString() || err.toString())))), projection && __jsx(\"div\", {\n    style: infoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Current Projection\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, `Projections for ${projection.length} players`)), __jsx(\"div\", {\n    style: buttonContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: importProjection,\n    color: \"primary\",\n    style: buttonStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Import\")), __jsx(TextField, {\n    id: \"standard-multiline-static\",\n    label: \"Import projections\",\n    multiline: true,\n    rows: \"28\",\n    placeholder: placeholder,\n    variant: \"outlined\",\n    style: textAreaStyle,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }))));\n};\n\nexport default ImportProjection;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/components/importprojection.js"],"names":["Card","Joi","useDispatch","useSelector","shallowEqual","TextField","Button","getState","dispatch","importErrors","state","rawProjection","projection","view","setRawProjection","value","type","payload","importProjection","Error","validationSchema","object","player","string","required","number","ownership","players","errors","formattedProjection","split","map","line","indexOf","result","Number","validation","validate","error","componentContainer","padding","cardContainer","display","flexDirection","placeholder","ImportProjection","onChange","event","target","textAreaStyle","width","buttonContainerStyle","paddingBottom","buttonStyle","paddingLeft","paddingRight","infoContainer","marginTop","length","err","toString"],"mappings":"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","sourcesContent":["import Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n\n  const importErrors = useSelector(state => state.importErrors, shallowEqual);\n  const rawProjection = useSelector(state => state.rawProjection, shallowEqual);\n  const projection = useSelector(state => state.projection, shallowEqual);\n  const view = useSelector(state => state.view);\n\n  const setRawProjection = (value) => {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  }\n\n  const importProjection = () => {\n\n    dispatch({ type: 'CLEAR_IMPORT_ERRORS' });\n\n    if (!rawProjection) {\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    const validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    });\n\n    // track players, they should be unique\n    const players = {};\n\n    // assumes that values will not contain commas\n    let errors = false;\n    const formattedProjection = rawProjection.split('\\n').map((line) => {\n\n      const [player, projection, ownership] = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t');\n      const result = {\n        player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(`Duplicate player - ${player}`)\n        });\n      }\n\n      players[player] = true;\n\n      const validation = validationSchema.validate(result);\n      if (validation.error) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    });\n\n    if (!errors) {\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  return {\n    setRawProjection,\n    projection,\n    importErrors,\n    importProjection,\n    view\n  };\n};\n\nconst componentContainer = {\n  padding: 16\n};\n\nconst cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\n\nconst placeholder = `Copy and paste a csv file of your own projections with desired ownership percentages.  Format each line of your csv like this:\n\nplayer id, projection, desired ownership\n`;\n\nconst ImportProjection  = () => {\n\n  const { importErrors, projection, setRawProjection, importProjection, view } = getState();\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  const onChange = (event) => setRawProjection(event.target.value);\n\n  const textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n\n  const buttonContainerStyle = {\n    paddingBottom: 24\n  }\n\n  const buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n\n  const infoContainer = {\n    paddingBottom: 36\n  };\n\n  return (\n    <div style={componentContainer}>\n      <h2 style={{ marginTop: 0 }}>Your Projections</h2>\n      <div style={cardContainer}>\n        <Card>\n          {importErrors && !!importErrors.length && (\n            <div style={infoContainer}>\n              <h3 style={{ marginTop: 0 }}>Import Has Errors</h3>\n              <ul>\n                {importErrors.map((err) => (\n                  <li>{(err.error && err.error.toString()) || err.toString()}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          {\n            projection && (\n              <div style={infoContainer}>\n                <h3 style={{ marginTop: 0 }}>Current Projection</h3>\n                <div>\n                  {`Projections for ${projection.length} players`}\n                  {\n                    //projection.map((projection) => (<li>{projection.player} - {projection.value}</li>))\n                  }\n                </div>\n              </div>\n            )\n          }\n          <div style={buttonContainerStyle}>\n            <Button variant=\"contained\" onClick={importProjection} color=\"primary\" style={buttonStyle}>Import</Button>\n          </div>\n          <TextField\n            id=\"standard-multiline-static\"\n            label=\"Import projections\"\n            multiline\n            rows=\"28\"\n            placeholder={placeholder}\n            variant=\"outlined\"\n            style={textAreaStyle}\n            onChange={onChange}\n          />\n        </Card>\n      </div>\n    </div>\n  )\n};\n\nexport default ImportProjection;\n"]},"metadata":{},"sourceType":"module"}