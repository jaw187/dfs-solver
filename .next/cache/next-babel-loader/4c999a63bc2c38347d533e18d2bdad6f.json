{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport OwnershipWatcher from '../solver/ownership';\nimport clone from 'lodash/clone';\nconst {\n  Models,\n  players,\n  Worker\n} = Solver;\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const stacks = useSelector(state => state.stacks, shallowEqual);\n  const stackCounts = useSelector(state => state.stackCounts, shallowEqual);\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n  const projection = useSelector(state => state.projection);\n  const results = useSelector(state => state.results);\n  const pool = useSelector(state => state.pool);\n  const view = useSelector(state => state.view);\n\n  const addResults = results => {\n    dispatch({\n      type: 'ADD_RESULT',\n      payload: results\n    });\n  };\n\n  return {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  };\n};\n\nconst Generator = () => {\n  const {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  } = getState();\n\n  if (view !== 'generator') {\n    return null;\n  }\n\n  if (!projection || stacks.length === 0) {\n    const issues = [];\n\n    if (stacks.length === 0) {\n      issues.push(__jsx(\"div\", null, \"You need to create stacks first\"));\n    }\n\n    if (!projection) {\n      issues.push(__jsx(\"div\", null, \"You need to import projections first\"));\n    }\n\n    return __jsx(\"div\", null, issues.map(issue => __jsx(\"div\", null, issue)));\n  }\n\n  const slate = slates && slates[selectedSlate];\n  const sport = slate.Sport.toLowerCase();\n  const site = 'draftkings';\n  const type = slate.GameType.Name.toLowerCase();\n\n  const generate = () => {\n    const playersForModel = players.convertPlayers(pool, projection, sport, site, type);\n    let n = 0;\n    stackCounts.forEach(count => {\n      n = n + count;\n    });\n    const worker = new Worker();\n    stacks.forEach((stack, i) => {\n      const stackPlayers = clone(playersForModel);\n      const model = Models[sport][site][type](stackPlayers); // Force players in stack into lineup\n\n      stack.forEach(player => model.constraints[player.draftableId] = {\n        equal: 1\n      });\n      const ownershipOptions = {\n        players: stackPlayers,\n        n: stackCounts[i],\n        stack\n      };\n      worker.postMessage({\n        action: 'ownership',\n        options: ownershipOptions\n      });\n      const enqueueOptions = {\n        action: 'enqueue',\n        n: stackCounts[i],\n        maxIterations: 500,\n        model,\n        players: stackPlayers,\n        sport,\n        site,\n        type\n      };\n      worker.postMessage(enqueueOptions);\n    });\n    worker.postMessage({\n      action: 'solve'\n    });\n    worker.addEventListener('message', event => {\n      const results = event.data;\n\n      if (results.length) {\n        addResults(results);\n      }\n    });\n  };\n\n  const formatPlayer = draftableId => {\n    const player = slate.players.find(player => player.draftableId == draftableId);\n\n    if (!player) {\n      return draftableId;\n    }\n\n    return `${player.position} - ${player.displayName} - ${player.salary}`;\n  };\n\n  return __jsx(Card, null, __jsx(\"h2\", null, \"Generator\"), __jsx(\"button\", {\n    onClick: generate\n  }, \"Generateee\"), __jsx(\"ul\", null, stacks.map((stack, i) => __jsx(\"li\", {\n    key: i\n  }, \"Stack with \", stackCounts[i], \" lineups\"))));\n};\n\nexport default Generator;","map":null,"metadata":{},"sourceType":"module"}