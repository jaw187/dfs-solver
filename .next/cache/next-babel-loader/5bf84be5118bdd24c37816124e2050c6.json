{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst rosters = require('./rosters');\n\nconst convertPlayer = (rawPlayer, positions) => {\n  const {\n    draftableId,\n    salary,\n    position,\n    projection,\n    ownership,\n    competition: {\n      startTime\n    }\n  } = rawPlayer;\n  const playerPositions = position.split('/');\n  const primaryPosition = playerPositions.shift();\n  const player = positions[primaryPosition](projection, salary, ownership, new Date(startTime));\n  playerPositions.forEach(extraPosition => {\n    player[extraPosition] = 1;\n  });\n  player[draftableId] = 1;\n  return player;\n};\n\nconst convertPlayers = (rawPlayers, rawProjections, sport, site, type) => {\n  const positions = rosters[sport][site][type];\n  const projections = {};\n  rawProjections.forEach(rawProjection => {\n    const {\n      value,\n      ownership,\n      player\n    } = rawProjection;\n    projections[player] = {\n      value,\n      ownership\n    };\n  });\n  const players = {};\n  rawPlayers.forEach(rawPlayer => {\n    const {\n      draftableId\n    } = rawPlayer; // Ignore players without a projection\n\n    if (!projections[draftableId]) {\n      return null;\n    }\n\n    const {\n      value,\n      ownership\n    } = projections[draftableId];\n\n    const player = _objectSpread({}, rawPlayer, {\n      ownership,\n      projection: value\n    });\n\n    players[draftableId] = convertPlayer(player, positions);\n  });\n  return players;\n};\n\nconst players = {\n  convertPlayers\n};\nexport default players;\n/*\nmodule.exports = {\n  'Taysom Hill': positions.qb(1000, 1000, 100, new Date()),\n  'Matt Ryan': positions.qb(100, 10000, 100, new Date()),\n  'Drew Brees': positions.qb(100, 10000, 100, new Date()),\n  'David Blough': positions.qb(500, 500, 100, new Date()),\n  'Devin Singletary': positions.rb(1000, 10000, 100, new Date(3)),\n  'Zeke': positions.rb(1000, 1000, 100, new Date(2)),\n  'Kamara': positions.rb(100, 10000, 100, new Date()),\n  'David Montgomery': positions.rb(145, 3344, 50, new Date(1)),\n  'Bo': positions.rb(66, 8745, 50, new Date()),\n  'Kenny Golladay': positions.wr(1000, 1000, 100, new Date(10000)),\n  'Michael Thomas': positions.wr(100, 6780, 50, new Date()),\n  'Cole Beasley': positions.wr(10000, 10000, 100, new Date(0)),\n  'Anthony Miller': positions.wr(900, 6788, 50, new Date(54545454545454)),\n  'Russell Gage Jr': positions.wr(100, 100, 50, new Date()),\n  'Calvin Ridley': positions.wr(1000, 1000, 100, new Date(-1)),\n  'Julio Jones': positions.wr(0, 100, 50, new Date()),\n  'Dawson Knox': positions.te(5, 1000, 50, new Date()),\n  'Jason Whitten': positions.te(15, 1000, 50, new Date()),\n  'Jared Cook': positions.te(7, 1000, 50, new Date()),\n  'Jaedeanaean Graham': positions.te(25, 4500, 50, new Date()),\n  'Bears': positions.dst(5, 1000, 50, new Date()),\n  'Lions': positions.dst(5, 1000, 50, new Date()),\n  'Tigers': positions.dst(500, 1000, 100, new Date())\n}\n*/","map":null,"metadata":{},"sourceType":"module"}