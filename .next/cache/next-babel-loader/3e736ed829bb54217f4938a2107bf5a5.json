{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/jwesto1/Code/jaw187/dfs-solver/components/slatepicker.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Card from './card';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst getState = () => {\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const view = useSelector(state => state.view);\n  const projection = useSelector(state => state.projection);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n  const dispatch = useDispatch();\n\n  const setSelectedSlate = selected => {\n    console.log('set', {\n      type: 'SET_SELECTED_SLATE',\n      payload: selected\n    });\n    dispatch({\n      type: 'SET_SELECTED_SLATE',\n      payload: selected\n    });\n    const nextView = projection ? 'playerpool' : 'importprojections';\n    dispatch({\n      type: 'SET_VIEW',\n      payload: nextView\n    });\n  };\n\n  return {\n    slates,\n    setSelectedSlate,\n    view,\n    selectedSlate\n  };\n};\n\nconst SlatePicker = () => {\n  const {\n    slates,\n    setSelectedSlate,\n    view,\n    selectedSlate\n  } = getState();\n\n  const draftGroupIds = _Object$keys(slates);\n\n  let selected = draftGroupIds && draftGroupIds[0];\n\n  const selectSlate = () => setSelectedSlate(selected);\n\n  const onChange = event => {\n    setSelectedSlate(event.target.value);\n  };\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  const componentContainer = {\n    padding: 16\n  };\n  const buttonContainerStyle = {\n    paddingTop: 16\n  };\n\n  if (view !== 'slatepicker') {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    style: componentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Upcoming Slates\"), __jsx(\"div\", {\n    style: cardContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    style: {\n      minWidth: 480\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    id: \"select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Select a slate\"), __jsx(Select, {\n    onChange: onChange,\n    labelId: \"select-label\",\n    value: selectedSlate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, draftGroupIds && draftGroupIds.map(draftGroupId => {\n    const slate = slates[draftGroupId];\n    const startTime = new Date(slate.StartDateEdt.substring(6, slate.StartDateEdt.length - 2) - 0);\n    const lineText = `${slate.SportDisplayName} ${slate.GameType.GameStyle.Name} on ${startTime} ${slate.ContestStartTimeSuffix || ''}`;\n    return __jsx(MenuItem, {\n      value: draftGroupId,\n      key: draftGroupId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, lineText);\n  })))), __jsx(\"div\", {\n    style: buttonContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: selectSlate,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Select\")))));\n};\n\nexport default SlatePicker;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/components/slatepicker.js"],"names":["React","Card","useDispatch","useSelector","shallowEqual","InputLabel","MenuItem","FormControl","Select","Button","getState","slates","state","view","projection","selectedSlate","dispatch","setSelectedSlate","selected","console","log","type","payload","nextView","SlatePicker","draftGroupIds","selectSlate","onChange","event","target","value","cardContainer","display","flexDirection","componentContainer","padding","buttonContainerStyle","paddingTop","marginTop","minWidth","map","draftGroupId","slate","startTime","Date","StartDateEdt","substring","length","lineText","SportDisplayName","GameType","GameStyle","Name","ContestStartTimeSuffix"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Card from './card';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst getState = () => {\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const view = useSelector(state => state.view);\n  const projection = useSelector(state => state.projection);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n\n  const dispatch = useDispatch();\n  const setSelectedSlate = (selected) => {\n    console.log('set', {\n      type: 'SET_SELECTED_SLATE',\n      payload: selected\n    })\n    dispatch({\n      type: 'SET_SELECTED_SLATE',\n      payload: selected\n    });\n\n    const nextView = projection ? 'playerpool' : 'importprojections';\n    dispatch({\n      type: 'SET_VIEW',\n      payload: nextView\n    });\n  };\n\n  return { slates, setSelectedSlate, view, selectedSlate };\n};\n\nconst SlatePicker = () => {\n\n  const { slates, setSelectedSlate, view, selectedSlate } = getState();\n\n  const draftGroupIds = Object.keys(slates);\n\n  let selected = draftGroupIds && draftGroupIds[0]\n  const selectSlate = () => setSelectedSlate(selected);\n\n  const onChange = (event) => {\n    setSelectedSlate(event.target.value);\n  }\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n\n  const componentContainer = {\n    padding: 16\n  };\n\n  const buttonContainerStyle = {\n    paddingTop: 16\n  }\n\n  if (view !== 'slatepicker') {\n    return null;\n  }\n\n  return (\n    <div style={componentContainer}>\n      <h2 style={{ marginTop: 0 }}>Upcoming Slates</h2>\n      <div style={cardContainer}>\n        <Card>\n          <div>\n            <FormControl style={{ minWidth: 480,  }}>\n              <InputLabel id=\"select-label\">Select a slate</InputLabel>\n              <Select onChange={onChange} labelId=\"select-label\" value={selectedSlate}>\n                {\n                  draftGroupIds && draftGroupIds.map((draftGroupId) => {\n                    const slate = slates[draftGroupId];\n                    const startTime = new Date((slate.StartDateEdt.substring(6, slate.StartDateEdt.length - 2) - 0));\n                    const lineText = `${slate.SportDisplayName} ${slate.GameType.GameStyle.Name} on ${startTime} ${slate.ContestStartTimeSuffix || ''}`;\n                    return (\n                      <MenuItem value={draftGroupId} key={draftGroupId}>{lineText}</MenuItem>\n                    );\n                  })\n                }\n              </Select>\n            </FormControl>\n          </div>\n\n          <div style={buttonContainerStyle}>\n            <Button variant=\"contained\" onClick={selectSlate} color=\"primary\">Select</Button>\n          </div>\n        </Card>\n      </div>\n    </div>\n  )\n};\n\nexport default SlatePicker\n"]},"metadata":{},"sourceType":"module"}