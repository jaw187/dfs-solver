{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nclass OwnershipWatcher {\n  constructor({\n    players,\n    n,\n    stack,\n    lineupStrings\n  }) {\n    const pool = this.pool = players;\n    const lineupsAllowed = {};\n\n    _Object$keys(pool).forEach(player => {\n      const count = pool[player].ownership / 100 * n;\n      lineupsAllowed[player] = count >= 1 ? lineupsAllowed : 1;\n    });\n\n    this.lineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.originalLineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.stack = stack.map(player => player.draftableId);\n    this.lineupStrings = lineupStrings;\n  }\n\n  update(players) {\n    const {\n      lineupsAllowed,\n      lineupStrings\n    } = this;\n    const lineupString = players.sort((a, b) => a > b).join('');\n    lineupStrings.push(lineupString);\n    players.forEach(player => {\n      --lineupsAllowed[player]; // Remove players from pool\n\n      if (lineupsAllowed[player] < 1 && !this.stack.includes(Number(player))) {\n        delete this.pool[player];\n      }\n    });\n  }\n\n  validate(players) {\n    const {\n      lineupsAllowed,\n      lineupStrings\n    } = this;\n    const lineupString = players.sort((a, b) => a > b).join('');\n\n    if (lineupStrings.includes(lineupString)) {\n      return false;\n    }\n\n    const ineligiblePlayers = players.filter(player => {\n      if (lineupsAllowed[player] < 1) {\n        if (this.stack.includes(Number(player))) {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n    return ineligiblePlayers.length === 0;\n  }\n\n}\n\nmodule.exports = OwnershipWatcher;","map":null,"metadata":{},"sourceType":"script"}