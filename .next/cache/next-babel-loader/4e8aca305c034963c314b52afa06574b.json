{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nvar getState = function getState() {\n  var dispatch = useDispatch();\n  var importErrors = useSelector(function (state) {\n    return state.importErrors;\n  }, shallowEqual);\n  var rawProjection = useSelector(function (state) {\n    return state.rawProjection;\n  }, shallowEqual);\n  var projection = useSelector(function (state) {\n    return state.projection;\n  }, shallowEqual);\n  var view = useSelector(function (state) {\n    return state.view;\n  });\n\n  var setRawProjection = function setRawProjection(value) {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  };\n\n  var importProjection = function importProjection() {\n    dispatch({\n      type: 'CLEAR_IMPORT_ERRORS'\n    });\n\n    if (!rawProjection) {\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    var validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    }); // track players, they should be unique\n\n    var players = {}; // assumes that values will not contain commas\n\n    var errors = false;\n    var formattedProjection = rawProjection.split('\\n').map(function (line) {\n      var _ref = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t'),\n          _ref2 = _slicedToArray(_ref, 3),\n          player = _ref2[0],\n          projection = _ref2[1],\n          ownership = _ref2[2];\n\n      var result = {\n        player: player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(\"Duplicate player - \".concat(player))\n        });\n      }\n\n      players[player] = true;\n      var validation = validationSchema.validate(result);\n\n      if (validation.error) {\n        errors = true;\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    });\n\n    if (!errors) {\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  return {\n    setRawProjection: setRawProjection,\n    projection: projection,\n    importErrors: importErrors,\n    importProjection: importProjection,\n    view: view\n  };\n};\n\nvar componentContainer = {\n  padding: 16\n};\nvar cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\nvar placeholder = \"Copy and paste a csv file of your own projections with desired ownership percentages.  Format each line of your csv like this:\\n\\nplayer id, projection, desired ownership\\n\";\n\nvar ImportProjection = function ImportProjection() {\n  var _getState = getState(),\n      importErrors = _getState.importErrors,\n      projection = _getState.projection,\n      setRawProjection = _getState.setRawProjection,\n      importProjection = _getState.importProjection,\n      view = _getState.view;\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  var onChange = function onChange(event) {\n    return setRawProjection(event.target.value);\n  };\n\n  var textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n  var buttonContainerStyle = {\n    paddingBottom: 24\n  };\n  var buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n  var infoContainer = {\n    paddingBottom: 36\n  };\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Your Projections\"), __jsx(\"div\", {\n    style: cardContainer\n  }, __jsx(Card, null, importErrors && !!importErrors.length && __jsx(\"div\", {\n    style: infoContainer\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Import Has Errors\"), __jsx(\"ul\", null, importErrors.map(function (err) {\n    return __jsx(\"li\", null, err.error && err.error.toString() || err.toString());\n  }))), projection && __jsx(\"div\", {\n    style: infoContainer\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Current Projection\"), __jsx(\"div\", null, \"Projections for \".concat(projection.length, \" players\"))), __jsx(\"div\", {\n    style: buttonContainerStyle\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: importProjection,\n    color: \"primary\",\n    style: buttonStyle\n  }, \"Import\")), __jsx(TextField, {\n    id: \"standard-multiline-static\",\n    label: \"Import projections\",\n    multiline: true,\n    rows: \"28\",\n    placeholder: placeholder,\n    variant: \"outlined\",\n    style: textAreaStyle,\n    onChange: onChange\n  }))));\n};\n\nexport default ImportProjection;","map":null,"metadata":{},"sourceType":"module"}