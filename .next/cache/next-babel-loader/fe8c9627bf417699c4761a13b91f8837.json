{"ast":null,"code":"var _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime-corejs2/helpers/createClass\");\n\nvar clone = require('lodash/cloneDeep');\n\nvar constraintList = {\n  nfl: {\n    draftkings: {\n      classic: {\n        pointz: {\n          max: 100000\n        },\n        salary: {\n          max: 50000\n        },\n        qb: {\n          min: 1,\n          max: 1\n        },\n        rb: {\n          min: 2,\n          max: 3\n        },\n        wr: {\n          min: 3,\n          max: 4\n        },\n        te: {\n          min: 1,\n          max: 2\n        },\n        dst: {\n          min: 1,\n          max: 1\n        },\n        player: {\n          equal: 9\n        }\n      }\n    }\n  },\n  golf: {\n    draftkings: {\n      classic: {\n        pointz: {\n          max: 100000\n        },\n        salary: {\n          max: 50000\n        },\n        g: {\n          equal: 6\n        }\n      }\n    }\n  }\n};\n\nvar Model =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Model(players, constraints) {\n    _classCallCheck(this, Model);\n\n    this.optimize = 'points';\n    this.opType = 'max';\n    this.constraints = constraints;\n    this.variables = players;\n    var ints = this.ints = {};\n\n    _Object$keys(players).forEach(function (player) {\n      // Limit results so player only shows up once in results.\n      // More players results in more complexity\n      players[player][player] = 1;\n      constraints[player] = {\n        max: 1\n      };\n      ints[player] = 1;\n    });\n  }\n\n  _createClass(Model, [{\n    key: \"removePlayer\",\n    value: function removePlayer(player) {\n      var constraints = this.constraints,\n          ints = this.ints;\n      delete constraints[player];\n      delete ints[player];\n    }\n  }]);\n\n  return Model;\n}();\n\nmodule.exports = {\n  nfl: {\n    draftkings: {\n      classic: function classic(players) {\n        return new Model(players, clone(constraintList.nfl.draftkings.classic));\n      }\n    }\n  },\n  golf: {\n    draftkings: {\n      classic: function classic(players) {\n        return new Model(players, clone(constraintList.golf.draftkings.classic));\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/solver/models.js"],"names":["clone","require","constraintList","nfl","draftkings","classic","pointz","max","salary","qb","min","rb","wr","te","dst","player","equal","golf","g","Model","players","constraints","optimize","opType","variables","ints","forEach","module","exports"],"mappings":"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","sourcesContent":["const clone = require('lodash/cloneDeep');\n\nconst constraintList = {\n  nfl: {\n    draftkings: {\n      classic: {\n        pointz: { max: 100000 },\n        salary: { max: 50000 },\n        qb: { min: 1, max: 1 },\n        rb: { min: 2, max: 3 },\n        wr: { min: 3, max: 4 },\n        te: { min: 1, max: 2 },\n        dst: { min: 1, max: 1 },\n        player: { equal: 9 }\n      }\n    }\n  },\n  golf: {\n    draftkings: {\n      classic: {\n        pointz: { max: 100000 },\n        salary: { max: 50000 },\n        g: { equal: 6 }\n      }\n    }\n  }\n};\n\nclass Model {\n  constructor(players, constraints) {\n\n    this.optimize = 'points';\n    this.opType = 'max';\n    this.constraints = constraints;\n    this.variables = players;\n    const ints = this.ints = {};\n\n\n    Object.keys(players).forEach((player) => {\n\n      // Limit results so player only shows up once in results.\n      // More players results in more complexity\n      players[player][player] = 1;\n      constraints[player] = { max: 1 };\n      ints[player] = 1;\n    });\n  }\n\n  removePlayer(player) {\n\n    const { constraints, ints } = this;\n    delete constraints[player];\n    delete ints[player];\n  }\n}\n\nmodule.exports = {\n  nfl: {\n    draftkings: {\n      classic: (players) => new Model(players, clone(constraintList.nfl.draftkings.classic))\n    }\n  },\n  golf: {\n    draftkings: {\n      classic: (players) => new Model(players, clone(constraintList.golf.draftkings.classic))\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}