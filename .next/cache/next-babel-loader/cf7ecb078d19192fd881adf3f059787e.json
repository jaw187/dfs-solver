{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jwesto1/Code/jaw187/dfs-solver/components/importprojection.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { log } from './utils';\n\nvar getState = function getState() {\n  var dispatch = useDispatch();\n  var importErrors = useSelector(function (state) {\n    return state.importErrors;\n  }, shallowEqual);\n  var rawProjection = useSelector(function (state) {\n    return state.rawProjection;\n  }, shallowEqual);\n  var projection = useSelector(function (state) {\n    return state.projection;\n  }, shallowEqual);\n  var view = useSelector(function (state) {\n    return state.view;\n  }, shallowEqual);\n  var slates = useSelector(function (state) {\n    return state.slates;\n  }, shallowEqual);\n  var selectedSlate = useSelector(function (state) {\n    return state.selectedSlate;\n  }, shallowEqual);\n\n  var setRawProjection = function setRawProjection(value) {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  };\n\n  var importProjection = function importProjection() {\n    log('import');\n    dispatch({\n      type: 'CLEAR_IMPORT_ERRORS'\n    });\n\n    if (!rawProjection) {\n      log('import error empty textarea');\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    var validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    }); // track players, they should be unique\n\n    var players = {}; // assumes that values will not contain commas\n\n    var errors = false;\n    var formattedProjection = rawProjection.split('\\n').map(function (line) {\n      var _ref = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t'),\n          _ref2 = _slicedToArray(_ref, 3),\n          player = _ref2[0],\n          projection = _ref2[1],\n          ownership = _ref2[2];\n\n      if (player === 'ID' || player === '') {\n        return 'REMOVE';\n      }\n\n      var result = {\n        player: player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        log('import error duplicate player');\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(\"Duplicate player - \".concat(player))\n        });\n      }\n\n      players[player] = true;\n      var validation = validationSchema.validate(result);\n\n      if (validation.error) {\n        errors = true;\n        log('import error validation error');\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    }).filter(function (result) {\n      return result !== 'REMOVE';\n    });\n\n    if (!errors) {\n      log(\"import \".concat(formattedProjection.length, \" records\"));\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  var exportTemplate = function exportTemplate() {\n    if (slates && selectedSlate) {\n      log(\"export template\");\n      var players = slates[selectedSlate].players;\n\n      var format = function format(player) {\n        return \"\".concat(player.displayName, \",\").concat(player.draftableId, \",,50\");\n      };\n\n      var header = \"Do not copy the player name column as well as this row\\nName,ID,Projection,Ownership\\n\";\n      var csv = \"data:text/csv;charset=utf-8,\" + header + players.map(format).join('\\n');\n      var _window = window,\n          _encodeURI = _window.encodeURI;\n      var downloadLink = document.createElement(\"a\");\n      downloadLink.href = _encodeURI(csv);\n      downloadLink.download = \"\".concat(selectedSlate, \" - Projections.csv\");\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }\n  };\n\n  return {\n    setRawProjection: setRawProjection,\n    projection: projection,\n    importErrors: importErrors,\n    importProjection: importProjection,\n    view: view,\n    exportTemplate: exportTemplate\n  };\n};\n\nvar componentContainer = {\n  padding: 16\n};\nvar cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\nvar placeholder = \"Copy and paste a csv or tab deliminated file of your own projections with desired ownership percentages.  Format each line of your csv like this:\\n\\nplayer id, projection, desired ownership\\n\\nor for a tab deliminated file, like this:\\nplayer id projection  desired ownership\\n\";\n\nvar ImportProjection = function ImportProjection() {\n  var _getState = getState(),\n      importErrors = _getState.importErrors,\n      projection = _getState.projection,\n      setRawProjection = _getState.setRawProjection,\n      importProjection = _getState.importProjection,\n      view = _getState.view,\n      exportTemplate = _getState.exportTemplate;\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  var onChange = function onChange(event) {\n    return setRawProjection(event.target.value);\n  };\n\n  var textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n  var buttonsContainerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    paddingBottom: 24\n  };\n  var buttonContainerStyle = {\n    paddingRight: 24\n  };\n  var buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n  var infoContainer = {\n    paddingBottom: 36\n  };\n  return __jsx(\"div\", {\n    style: componentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Your Projections\"), __jsx(\"div\", {\n    style: cardContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, !projection && __jsx(\"div\", {\n    style: infoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"DFS Solver is a Bring Your Own Projection system.  You'll need to copy and paste your projections into the text area below. Use the Export Template button to download a sheet with proper player id's for your selected slate.\"), importErrors && !!importErrors.length && __jsx(\"div\", {\n    style: infoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Import Has Errors\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, importErrors.map(function (err) {\n    return __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, err.error && err.error.toString() || err.toString());\n  }))), projection && __jsx(\"div\", {\n    style: infoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Current Projection\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Projections for \".concat(projection.length, \" players\"))), __jsx(\"div\", {\n    style: buttonsContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: buttonContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: importProjection,\n    color: \"primary\",\n    style: buttonStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Import Projections\")), __jsx(\"div\", {\n    style: buttonContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    onClick: exportTemplate,\n    color: \"secondary\",\n    style: buttonStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Export Template\"))), __jsx(TextField, {\n    id: \"standard-multiline-static\",\n    label: \"Import projections\",\n    multiline: true,\n    rows: \"28\",\n    placeholder: placeholder,\n    variant: \"outlined\",\n    style: textAreaStyle,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }))));\n};\n\nexport default ImportProjection;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/components/importprojection.js"],"names":["Card","Joi","useDispatch","useSelector","shallowEqual","TextField","Button","log","getState","dispatch","importErrors","state","rawProjection","projection","view","slates","selectedSlate","setRawProjection","value","type","payload","importProjection","Error","validationSchema","object","player","string","required","number","ownership","players","errors","formattedProjection","split","map","line","indexOf","result","Number","validation","validate","error","filter","length","exportTemplate","format","displayName","draftableId","header","csv","join","window","encodeURI","downloadLink","document","createElement","href","download","body","appendChild","click","removeChild","componentContainer","padding","cardContainer","display","flexDirection","placeholder","ImportProjection","onChange","event","target","textAreaStyle","width","buttonsContainerStyle","paddingBottom","buttonContainerStyle","paddingRight","buttonStyle","paddingLeft","infoContainer","marginTop","err","toString"],"mappings":"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","sourcesContent":["import Card from './card';\nimport Joi from '@hapi/joi';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { log } from './utils';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n\n  const importErrors = useSelector(state => state.importErrors, shallowEqual);\n  const rawProjection = useSelector(state => state.rawProjection, shallowEqual);\n  const projection = useSelector(state => state.projection, shallowEqual);\n  const view = useSelector(state => state.view, shallowEqual);\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate, shallowEqual);\n\n  const setRawProjection = (value) => {\n    dispatch({\n      type: 'SET_RAW_PROJECTION',\n      payload: value\n    });\n  };\n\n  const importProjection = () => {\n    log('import');\n\n    dispatch({ type: 'CLEAR_IMPORT_ERRORS' });\n\n    if (!rawProjection) {\n      log('import error empty textarea')\n      return dispatch({\n        type: 'ADD_IMPORT_ERROR',\n        payload: new Error('empty textarea')\n      });\n    }\n\n    const validationSchema = Joi.object({\n      player: Joi.string().required(),\n      value: Joi.number().required(),\n      ownership: Joi.number().required()\n    });\n\n    // track players, they should be unique\n    const players = {};\n\n    // assumes that values will not contain commas\n    let errors = false;\n    const formattedProjection = rawProjection.split('\\n').map((line) => {\n      const [player, projection, ownership] = line.indexOf(',') > 0 ? line.split(',') : line.split('\\t');\n\n      if (player === 'ID' || player === '') {\n        return 'REMOVE';\n      }\n\n      const result = {\n        player,\n        value: Number(projection),\n        ownership: Number(ownership)\n      };\n\n      if (players[player]) {\n        errors = true;\n        log('import error duplicate player')\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: new Error(`Duplicate player - ${player}`)\n        });\n      }\n\n      players[player] = true;\n\n      const validation = validationSchema.validate(result);\n      if (validation.error) {\n        errors = true;\n        log('import error validation error')\n        dispatch({\n          type: 'ADD_IMPORT_ERROR',\n          payload: validation\n        });\n      }\n\n      return result;\n    }).filter((result) => result !== 'REMOVE');\n\n    if (!errors) {\n      log(`import ${formattedProjection.length} records`)\n      dispatch({\n        type: 'SET_PROJECTION',\n        payload: formattedProjection\n      });\n    }\n  };\n\n  const exportTemplate = () => {\n    if (slates && selectedSlate) {\n      log(`export template`)\n      const { players } = slates[selectedSlate];\n      const format = (player) => {\n        return `${player.displayName},${player.draftableId},,50`;\n      };\n      const header = \"Do not copy the player name column as well as this row\\nName,ID,Projection,Ownership\\n\"\n      const csv = \"data:text/csv;charset=utf-8,\" + header + players.map(format).join('\\n');\n\n      const { encodeURI } = window;\n\n      const downloadLink = document.createElement(\"a\");\n      downloadLink.href = encodeURI(csv);\n      downloadLink.download = `${selectedSlate} - Projections.csv`;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }\n  };\n\n  return {\n    setRawProjection,\n    projection,\n    importErrors,\n    importProjection,\n    view,\n    exportTemplate\n  };\n};\n\nconst componentContainer = {\n  padding: 16\n};\n\nconst cardContainer = {\n  display: 'flex',\n  flexDirection: 'row'\n};\n\nconst placeholder = `Copy and paste a csv or tab deliminated file of your own projections with desired ownership percentages.  Format each line of your csv like this:\n\nplayer id, projection, desired ownership\n\nor for a tab deliminated file, like this:\nplayer id projection  desired ownership\n`;\n\nconst ImportProjection  = () => {\n\n  const { importErrors, projection, setRawProjection, importProjection, view, exportTemplate } = getState();\n\n  if (view !== 'importprojections') {\n    return null;\n  }\n\n  const onChange = (event) => setRawProjection(event.target.value);\n\n  const textAreaStyle = {\n    width: 480,\n    padding: 8\n  };\n\n  const buttonsContainerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    paddingBottom: 24\n  };\n\n  const buttonContainerStyle = {\n    paddingRight: 24\n  }\n\n  const buttonStyle = {\n    paddingLeft: 36,\n    paddingRight: 36\n  };\n\n  const infoContainer = {\n    paddingBottom: 36\n  };\n\n  return (\n    <div style={componentContainer}>\n      <h2 style={{ marginTop: 0 }}>Your Projections</h2>\n      <div style={cardContainer}>\n        <Card>\n          { !projection && (\n            <div style={infoContainer}>\n              DFS Solver is a Bring Your Own Projection system.  You'll need to copy and paste your projections into the text area below.\n              Use the Export Template button to download a sheet with proper player id's for your selected slate.\n            </div>\n          )}\n          {importErrors && !!importErrors.length && (\n            <div style={infoContainer}>\n              <h3 style={{ marginTop: 0 }}>Import Has Errors</h3>\n              <ul>\n                {importErrors.map((err) => (\n                  <li>{(err.error && err.error.toString()) || err.toString()}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          {\n            projection && (\n              <div style={infoContainer}>\n                <h3 style={{ marginTop: 0 }}>Current Projection</h3>\n                <div>\n                  {`Projections for ${projection.length} players`}\n                  {\n                    //projection.map((projection) => (<li>{projection.player} - {projection.value}</li>))\n                  }\n                </div>\n              </div>\n            )\n          }\n          <div style={buttonsContainerStyle}>\n            <div style={buttonContainerStyle}>\n              <Button variant=\"contained\" onClick={importProjection} color=\"primary\" style={buttonStyle}>Import Projections</Button>\n            </div>\n            <div style={buttonContainerStyle}>\n              <Button variant=\"contained\" onClick={exportTemplate} color=\"secondary\" style={buttonStyle}>Export Template</Button>\n            </div>\n          </div>\n          <TextField\n            id=\"standard-multiline-static\"\n            label=\"Import projections\"\n            multiline\n            rows=\"28\"\n            placeholder={placeholder}\n            variant=\"outlined\"\n            style={textAreaStyle}\n            onChange={onChange}\n          />\n        </Card>\n      </div>\n    </div>\n  )\n};\n\nexport default ImportProjection;\n"]},"metadata":{},"sourceType":"module"}