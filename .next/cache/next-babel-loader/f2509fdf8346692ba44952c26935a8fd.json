{"ast":null,"code":"var _jsxFileName = \"/Users/jwesto1/Code/jaw187/dfs-solver/components/generator.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport OwnershipWatcher from '../solver/ownership';\nimport clone from 'lodash/clone';\nconst {\n  Models,\n  players,\n  Worker\n} = Solver;\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const stacks = useSelector(state => state.stacks, shallowEqual);\n  const stackCounts = useSelector(state => state.stackCounts, shallowEqual);\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n  const projection = useSelector(state => state.projection);\n  const results = useSelector(state => state.results);\n  const pool = useSelector(state => state.pool);\n  const view = useSelector(state => state.view);\n\n  const addResults = results => {\n    dispatch({\n      type: 'ADD_RESULT',\n      payload: results\n    });\n  };\n\n  return {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  };\n};\n\nconst Generator = () => {\n  const {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  } = getState();\n\n  if (view !== 'generator') {\n    return null;\n  }\n\n  if (!projection || stacks.length === 0) {\n    const issues = [];\n\n    if (stacks.length === 0) {\n      issues.push(__jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"You need to create stacks first\"));\n    }\n\n    if (!projection) {\n      issues.push(__jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"You need to import projections first\"));\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, issues.map(issue => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, issue)));\n  }\n\n  const slate = slates && slates[selectedSlate];\n  const sport = slate.Sport.toLowerCase();\n  const site = 'draftkings';\n  const type = slate.GameType.Name.toLowerCase();\n\n  const generate = () => {\n    const playersForModel = players.convertPlayers(pool, projection, sport, site, type);\n    let n = 0;\n    stackCounts.forEach(count => {\n      n = n + count;\n    });\n    const worker = new Worker();\n    stacks.forEach((stack, i) => {\n      const stackPlayers = clone(playersForModel);\n      const model = Models[sport][site][type](stackPlayers); // Force players in stack into lineup\n\n      stack.forEach(player => model.constraints[player.draftableId] = {\n        equal: 1\n      });\n      const ownershipOptions = {\n        players: stackPlayers,\n        n: stackCounts[i],\n        stack\n      };\n      worker.postMessage({\n        action: 'ownership',\n        options: ownershipOptions\n      });\n      const enqueueOptions = {\n        action: 'enqueue',\n        n: stackCounts[i],\n        maxIterations: 500,\n        model,\n        players: stackPlayers,\n        sport,\n        site,\n        type\n      };\n      worker.postMessage(enqueueOptions);\n    });\n    worker.postMessage({\n      action: 'solve'\n    });\n    worker.addEventListener('message', event => {\n      const results = event.data;\n\n      if (results.length) {\n        addResults(results);\n      }\n    });\n  };\n\n  const formatPlayer = draftableId => {\n    const player = slate.players.find(player => player.draftableId == draftableId);\n\n    if (!player) {\n      return draftableId;\n    }\n\n    return `${player.position} - ${player.displayName} - ${player.salary}`;\n  };\n\n  return __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Generator\"), __jsx(\"button\", {\n    onClick: generate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Generateee\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, stacks.map((stack, i) => __jsx(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Stack with \", stackCounts[i], \" lineups\"))));\n};\n\nexport default Generator;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/components/generator.js"],"names":["Card","useSelector","useDispatch","shallowEqual","Solver","OwnershipWatcher","clone","Models","players","Worker","getState","dispatch","stacks","state","stackCounts","slates","selectedSlate","projection","results","pool","view","addResults","type","payload","Generator","length","issues","push","map","issue","slate","sport","Sport","toLowerCase","site","GameType","Name","generate","playersForModel","convertPlayers","n","forEach","count","worker","stack","i","stackPlayers","model","player","constraints","draftableId","equal","ownershipOptions","postMessage","action","options","enqueueOptions","maxIterations","addEventListener","event","data","formatPlayer","find","position","displayName","salary"],"mappings":"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","sourcesContent":["import Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport OwnershipWatcher from '../solver/ownership';\nimport clone from 'lodash/clone';\n\nconst { Models, players, Worker } = Solver;\n\nconst getState = () => {\n  const dispatch = useDispatch();\n\n  const stacks = useSelector(state => state.stacks, shallowEqual);\n  const stackCounts = useSelector(state => state.stackCounts, shallowEqual);\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n  const projection = useSelector(state => state.projection);\n  const results = useSelector(state => state.results);\n  const pool = useSelector(state => state.pool);\n  const view = useSelector(state => state.view);\n\n  const addResults = (results) => {\n    dispatch({\n      type: 'ADD_RESULT',\n      payload: results\n    });\n  };\n\n  return {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  };\n};\n\nconst Generator = () => {\n  const {\n    stacks,\n    stackCounts,\n    slates,\n    selectedSlate,\n    projection,\n    addResults,\n    results,\n    pool,\n    view\n  } = getState();\n\n  if (view !== 'generator') {\n    return null;\n  }\n\n  if (!projection || stacks.length === 0) {\n    const issues = [];\n    if (stacks.length === 0) {\n      issues.push((<div>You need to create stacks first</div>))\n    }\n\n    if (!projection) {\n      issues.push((<div>You need to import projections first</div>))\n    }\n\n    return (\n      <div>\n        {issues.map((issue) => (<div>{issue}</div>))}\n      </div>\n    );\n  }\n\n  const slate = slates && slates[selectedSlate]\n  const sport = slate.Sport.toLowerCase();\n  const site = 'draftkings';\n  const type = slate.GameType.Name.toLowerCase();\n\n  const generate = () => {\n    const playersForModel = players.convertPlayers(pool, projection, sport, site, type);\n\n    let n = 0;\n    stackCounts.forEach((count) => {\n      n = n + count;\n    });\n\n    const worker = new Worker();\n\n    stacks.forEach((stack, i) => {\n      const stackPlayers = clone(playersForModel);\n      const model = Models[sport][site][type](stackPlayers);\n      // Force players in stack into lineup\n      stack.forEach((player) => model.constraints[player.draftableId] = { equal: 1 });\n\n      const ownershipOptions = { players: stackPlayers, n: stackCounts[i], stack }\n      worker.postMessage({ action: 'ownership', options: ownershipOptions});\n\n      const enqueueOptions = {\n        action: 'enqueue',\n        n: stackCounts[i],\n        maxIterations: 500,\n        model,\n        players: stackPlayers,\n        sport,\n        site,\n        type\n      };\n      worker.postMessage(enqueueOptions);\n    });\n\n    worker.postMessage({ action: 'solve' });\n    worker.addEventListener('message', (event) => {\n      const results = event.data;\n      if (results.length) {\n        addResults(results);\n      }\n    });\n  };\n\n  const formatPlayer = (draftableId) => {\n    const player = slate.players.find((player) => player.draftableId == draftableId);\n    if (!player) {\n      return draftableId;\n    }\n\n    return `${player.position} - ${player.displayName} - ${player.salary}`;\n  }\n\n  return (\n    <Card>\n      <h2>Generator</h2>\n      <button onClick={generate}>Generateee</button>\n      <ul>\n      {\n        stacks.map((stack, i) => (\n          <li key={i}>Stack with {stackCounts[i]} lineups</li>\n        ))\n      }\n      </ul>\n    </Card>\n  );\n};\n\nexport default Generator;\n"]},"metadata":{},"sourceType":"module"}