{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Card from \"./card\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const stacks = useSelector(state => state.stacks, shallowEqual);\n  const view = useSelector(state => state.view);\n  const stackCounts = useSelector(state => state.stackCounts);\n\n  const removeStack = i => dispatch({\n    type: \"REMOVE_STACK\",\n    payload: i\n  });\n\n  const setStackN = (i, n) => {\n    dispatch({\n      type: \"SET_STACK_N\",\n      payload: {\n        i,\n        n\n      }\n    });\n  };\n\n  const moveStack = (j, which) => {\n    dispatch({\n      type: \"MOVE_STACK\",\n      payload: {\n        j,\n        which\n      }\n    });\n  };\n\n  return {\n    stacks,\n    removeStack,\n    setStackN,\n    view,\n    stackCounts,\n    moveStack\n  };\n};\n\nconst Stacks = () => {\n  const {\n    stacks,\n    removeStack,\n    setStackN,\n    view,\n    stackCounts,\n    moveStack\n  } = getState();\n\n  if (view !== 'stackbuilder') {\n    return null;\n  }\n\n  if (!stacks || stacks.length === 0) {\n    return null;\n  }\n\n  const remove = i => {\n    return () => {\n      removeStack(i);\n    };\n  };\n\n  const onChange = i => {\n    return event => {\n      event.target.value = Number(event.target.value);\n      setStackN(i, event.target.value);\n    };\n  };\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: \"wrap\"\n  };\n  const marks = [{\n    value: 0\n  }, {\n    value: 5\n  }, {\n    value: 10\n  }, {\n    value: 15\n  }];\n\n  const handleSliderChange = i => {\n    return (event, newValue) => {\n      setStackN(i, newValue);\n    };\n  };\n\n  const handleInputChange = i => {\n    return event => {\n      const newValue = event.target.value === '' ? '' : Number(event.target.value);\n      setStackN(i, newValue);\n    };\n  };\n\n  const handleBlur = i => {\n    return () => {\n      if (stackCounts[i] < 0) {\n        setStackN(i, 1);\n      } else if (stackCounts[i] > 20) {\n        setStackN(i, 20);\n      }\n    };\n  };\n\n  const move = (j, which) => {\n    return () => {\n      moveStack(j, which);\n    };\n  };\n\n  return __jsx(\"div\", null, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Stacks\"), __jsx(\"div\", {\n    style: cardContainer\n  }, stacks.map((stack, j) => {\n    if (!stackCounts[j]) {\n      stackCounts[j] = 10;\n    }\n\n    return __jsx(Card, null, __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: '100%'\n      },\n      key: j\n    }, __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      }\n    }, __jsx(\"div\", {\n      onClick: move(j, 'left')\n    }, \"Move Left\"), __jsx(\"div\", {\n      onClick: move(j, 'right')\n    }, \"Move Right\")), __jsx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, __jsx(\"ul\", null, stack.map((player, i) => __jsx(\"li\", {\n      key: i\n    }, player.displayName)))), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      }\n    }, __jsx(\"div\", {\n      style: {\n        minWidth: 240,\n        marginRight: 16\n      }\n    }, \"No. of lineups\", __jsx(Slider, {\n      defaultValue: stackCounts[j],\n      value: stackCounts[j],\n      step: 1,\n      marks: marks,\n      min: 1,\n      max: 20,\n      onChange: handleSliderChange(j),\n      \"aria-labelledby\": \"input-slider\"\n    })), __jsx(\"div\", {\n      style: {\n        marginTop: 4\n      }\n    }, __jsx(Input, {\n      value: stackCounts[j],\n      margin: \"dense\",\n      onChange: handleInputChange(j),\n      onBlur: handleBlur(j),\n      inputProps: {\n        step: 1,\n        min: 1,\n        max: 20,\n        type: 'number',\n        'aria-labelledby': 'input-slider'\n      }\n    }))), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      }\n    }), __jsx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, __jsx(Button, {\n      onClick: remove(j),\n      variant: \"contained\",\n      color: \"secondary\"\n    }, \"Delete\"))));\n  })));\n};\n\nexport default Stacks;","map":null,"metadata":{},"sourceType":"module"}