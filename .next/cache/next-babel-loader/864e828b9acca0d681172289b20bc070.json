{"ast":null,"code":"var _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nmodule.exports = {\n  nfl: {\n    draftkings: {\n      classic: function classic(players) {\n        return function (solution) {\n          var points = solution.result;\n          var roster = {\n            positions: {\n              qb: [],\n              rb: [],\n              wr: [],\n              te: [],\n              dst: []\n            }\n          };\n\n          var resultPlayers = _Object$keys(solution).filter(function (key) {\n            var keysToRemove = ['feasible', 'result', 'bounded', 'isIntegral'];\n            return !keysToRemove.includes(key);\n          }); // Add players to positions their eligible for\n\n\n          var playersEligibleAtMoreThanOnePosition = [];\n          resultPlayers.forEach(function (playerId) {\n            var positions = 0;\n            var player = players[playerId];\n            player.id = playerId;\n\n            if (player.qb) {\n              ++positions;\n              roster.positions.qb.push(player);\n            }\n\n            if (player.dst) {\n              ++positions;\n              roster.positions.dst.push(player);\n            }\n\n            if (player.rb) {\n              ++positions;\n              roster.positions.rb.push(player);\n            }\n\n            if (player.wr) {\n              ++positions;\n              roster.positions.wr.push(player);\n            }\n\n            if (player.te) {\n              ++positions;\n              roster.positions.te.push(player);\n            }\n\n            var playsMultiplePositions = positions > 1;\n\n            if (playsMultiplePositions) {\n              player.multiplePositions = true;\n              playersEligibleAtMoreThanOnePosition.push(player);\n            }\n          }); // Determine expected position of player.\n\n          playersEligibleAtMoreThanOnePosition.forEach(function (player) {\n            var removePlayer = function removePlayer(positionPlayer) {\n              return !(player.id === positionPlayer.id);\n            };\n\n            if (player.qb && roster.positions.qb.length === 1) {\n              roster.positions.rb = roster.positions.rb.filter(removePlayer);\n              roster.positions.wr = roster.positions.wr.filter(removePlayer);\n              roster.positions.te = roster.positions.te.filter(removePlayer);\n              roster.positions.dst = roster.positions.dst.filter(removePlayer);\n              return null;\n            }\n\n            if (player.rb && roster.positions.rb.length === 2) {\n              roster.positions.qb = roster.positions.qb.filter(removePlayer);\n              roster.positions.wr = roster.positions.wr.filter(removePlayer);\n              roster.positions.te = roster.positions.te.filter(removePlayer);\n              roster.positions.dst = roster.positions.dst.filter(removePlayer);\n              return null;\n            }\n\n            if (player.wr && roster.positions.wr.length === 2) {\n              roster.positions.qb = roster.positions.qb.filter(removePlayer);\n              roster.positions.rb = roster.positions.rb.filter(removePlayer);\n              roster.positions.te = roster.positions.te.filter(removePlayer);\n              roster.positions.dst = roster.positions.dst.filter(removePlayer);\n              return null;\n            }\n\n            if (player.te && roster.positions.te.length === 1) {\n              roster.positions.qb = roster.positions.qb.filter(removePlayer);\n              roster.positions.rb = roster.positions.rb.filter(removePlayer);\n              roster.positions.wr = roster.positions.wr.filter(removePlayer);\n              roster.positions.dst = roster.positions.dst.filter(removePlayer);\n              return null;\n            }\n\n            if (player.dst && roster.positions.dst.length === 1) {\n              roster.positions.qb = roster.positions.qb.filter(removePlayer);\n              roster.positions.rb = roster.positions.rb.filter(removePlayer);\n              roster.positions.wr = roster.positions.wr.filter(removePlayer);\n              roster.positions.te = roster.positions.te.filter(removePlayer);\n            }\n          }); // Sort by start time\n          // Attempting to account for late swap\n\n          var sort = function sort(a, b) {\n            return a.startTime - b.startTime;\n          };\n\n          roster.positions.rb.sort(sort);\n          roster.positions.wr.sort(sort);\n          roster.positions.te.sort(sort); //construct lineup\n\n          var lineup = {\n            qb: roster.positions.qb[0],\n            rbs: roster.positions.rb.slice(0, 2),\n            wrs: roster.positions.wr.slice(0, 3),\n            te: roster.positions.te[0],\n            flex: roster.positions.rb[2] || roster.positions.wr[3] || roster.positions.te[1],\n            dst: roster.positions.dst[0]\n          };\n          return {\n            points: points,\n            lineup: lineup,\n            players: resultPlayers\n          };\n        };\n      }\n    }\n  },\n  golf: {\n    draftkings: {\n      classic: function classic(players) {\n        return function (solution) {\n          var points = solution.result;\n          var roster = {\n            positions: {\n              g: []\n            }\n          };\n\n          var resultPlayers = _Object$keys(solution).filter(function (key) {\n            var keysToRemove = ['feasible', 'result', 'bounded', 'isIntegral'];\n            return !keysToRemove.includes(key);\n          }); // Add players to positions their eligible for\n\n\n          var playersEligibleAtMoreThanOnePosition = [];\n          resultPlayers.forEach(function (playerId) {\n            var player = players[playerId];\n            player.id = playerId;\n            roster.positions.g.push(player);\n          }); // Sort by start time\n          // Attempting to account for late swap\n\n          var sort = function sort(a, b) {\n            return a.startTime - b.startTime;\n          };\n\n          roster.positions.g.sort(sort); //construct lineup\n\n          var lineup = {\n            g: roster.positions.g\n          };\n          return {\n            points: points,\n            lineup: lineup,\n            players: resultPlayers\n          };\n        };\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}