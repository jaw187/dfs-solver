{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime-corejs2/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar OwnershipWatcher =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function OwnershipWatcher(_ref) {\n    var players = _ref.players,\n        n = _ref.n,\n        stack = _ref.stack,\n        lineupStrings = _ref.lineupStrings;\n\n    _classCallCheck(this, OwnershipWatcher);\n\n    var pool = this.pool = players;\n    var lineupsAllowed = {};\n\n    _Object$keys(pool).forEach(function (player) {\n      var count = pool[player].ownership / 100 * n;\n      lineupsAllowed[player] = count >= 1 ? lineupsAllowed : 1;\n    });\n\n    this.lineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.originalLineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.stack = stack.map(function (player) {\n      return player.draftableId;\n    });\n    this.lineupStrings = lineupStrings;\n  }\n\n  _createClass(OwnershipWatcher, [{\n    key: \"update\",\n    value: function update(players) {\n      var _this = this;\n\n      var lineupsAllowed = this.lineupsAllowed,\n          lineupStrings = this.lineupStrings;\n      var lineupString = players.sort(function (a, b) {\n        return a > b;\n      }).join('');\n      lineupStrings.push(lineupString);\n      players.forEach(function (player) {\n        --lineupsAllowed[player]; // Remove players from pool\n\n        if (lineupsAllowed[player] < 1 && !_this.stack.includes(Number(player))) {\n          delete _this.pool[player];\n        }\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(players) {\n      var _this2 = this;\n\n      var lineupsAllowed = this.lineupsAllowed,\n          lineupStrings = this.lineupStrings;\n      var lineupString = players.sort(function (a, b) {\n        return a > b;\n      }).join('');\n\n      if (lineupStrings.includes(lineupString)) {\n        return false;\n      }\n\n      var ineligiblePlayers = players.filter(function (player) {\n        if (lineupsAllowed[player] < 1) {\n          if (_this2.stack.includes(Number(player))) {\n            return false;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n      return ineligiblePlayers.length === 0;\n    }\n  }]);\n\n  return OwnershipWatcher;\n}();\n\nmodule.exports = OwnershipWatcher;","map":null,"metadata":{},"sourceType":"script"}