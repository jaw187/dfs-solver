{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport { log } from './utils';\nconst {\n  solve,\n  Models,\n  players\n} = Solver;\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const slates = useSelector(state => state.slates, shallowEqual);\n  const selectedSlate = useSelector(state => state.selectedSlate);\n  const projection = useSelector(state => state.projection);\n  const results = useSelector(state => state.results);\n  const view = useSelector(state => state.view);\n\n  const removeLineup = i => {\n    dispatch({\n      type: 'REMOVE_RESULT',\n      payload: i\n    });\n  };\n\n  return {\n    slates,\n    selectedSlate,\n    projection,\n    results,\n    view,\n    removeLineup\n  };\n};\n\nconst Lineups = () => {\n  const {\n    slates,\n    selectedSlate,\n    projection,\n    results,\n    view,\n    removeLineup\n  } = getState();\n\n  if (view !== 'results') {\n    return null;\n  }\n\n  if (results.length === 0) {\n    return __jsx(\"div\", null, \"Generate some lineups\");\n  }\n\n  const slate = slates && slates[selectedSlate];\n  const sport = slate.Sport.toLowerCase();\n  const site = 'draftkings';\n  const type = slate.GameType.Name.toLowerCase();\n\n  const formatPlayer = lineupPlayer => {\n    const player = slate.players.find(player => player.draftableId == lineupPlayer.id);\n\n    if (!player) {\n      return lineupPlayer.id;\n    }\n\n    return `${player.position} - ${player.displayName} - $${player.salary}`;\n  };\n\n  const headers = {\n    nfl: {\n      draftkings: {\n        classic: \"QB,RB,RB,WR,WR,WR,TE,FLEX,DST\\n\"\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: \"G,G,G,G,G,G\\n\"\n      }\n    }\n  };\n  const exporters = {\n    nfl: {\n      draftkings: {\n        classic: result => {\n          const {\n            lineup: {\n              qb,\n              rbs,\n              wrs,\n              te,\n              flex,\n              dst\n            }\n          } = result;\n          return `${qb.id},${rbs[0].id},${rbs[1].id},${wrs[0].id},${wrs[1].id},${wrs[2].id},${te.id},${flex.id},${dst.id}`;\n        }\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: result => {\n          const {\n            lineup: {\n              g\n            }\n          } = result;\n          return `${g[0].id},${g[1].id},${g[2].id},${g[3].id},${g[4].id},${g[5].id}`;\n        }\n      }\n    }\n  };\n\n  const exportToCSV = () => {\n    log('export linieups');\n    const header = headers[sport][site][type];\n    const csv = \"data:text/csv;charset=utf-8,\" + header + results.map(exporters[sport][site][type]).join('\\n');\n    const {\n      encodeURI\n    } = window;\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = encodeURI(csv);\n    downloadLink.download = `${selectedSlate} - Lineups.csv`;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const remove = i => {\n    log('remove lineup');\n    return () => removeLineup(i);\n  };\n\n  const containerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  };\n  const lineupStyle = {\n    padding: 16,\n    margin: 8,\n    backgroundColor: \"#f3f3f3\",\n    border: '1px solid #DDD',\n    fontSize: 12\n  };\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  const componentContainer = {\n    padding: 16\n  };\n  const playerCounts = {};\n  results.forEach(result => {\n    result.players.forEach(player => {\n      if (!playerCounts[player]) {\n        playerCounts[player] = 0;\n      }\n\n      ++playerCounts[player];\n    });\n  });\n\n  const ownership = _Object$keys(playerCounts).map(player => {\n    return {\n      player: formatPlayer({\n        id: player\n      }),\n      count: playerCounts[player],\n      percentage: (playerCounts[player] / results.length * 100).toFixed(0)\n    };\n  });\n\n  const ownershipPlayerStyle = {\n    whiteSpace: 'nowrap'\n  };\n  const lineupFormats = {\n    nfl: {\n      draftkings: {\n        classic: (result, i) => __jsx(\"div\", {\n          key: i,\n          style: lineupStyle\n        }, __jsx(\"button\", {\n          onClick: remove(i)\n        }, \"Remove\"), __jsx(\"div\", null, formatPlayer(result.lineup.qb)), __jsx(\"div\", null, formatPlayer(result.lineup.rbs[0])), __jsx(\"div\", null, formatPlayer(result.lineup.rbs[1])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[0])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[1])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[2])), __jsx(\"div\", null, formatPlayer(result.lineup.te)), __jsx(\"div\", null, formatPlayer(result.lineup.flex)), __jsx(\"div\", null, formatPlayer(result.lineup.dst)))\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: (result, i) => __jsx(\"div\", {\n          key: i,\n          style: lineupStyle\n        }, __jsx(\"button\", {\n          onClick: remove(i)\n        }, \"Remove\"), __jsx(\"div\", null, formatPlayer(result.lineup.g[0])), __jsx(\"div\", null, formatPlayer(result.lineup.g[1])), __jsx(\"div\", null, formatPlayer(result.lineup.g[2])), __jsx(\"div\", null, formatPlayer(result.lineup.g[3])), __jsx(\"div\", null, formatPlayer(result.lineup.g[4])), __jsx(\"div\", null, formatPlayer(result.lineup.g[5])))\n      }\n    }\n  };\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Lineups\"), __jsx(\"div\", {\n    style: cardContainer\n  }, __jsx(Card, null, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Ownership\"), !!ownership.length && __jsx(\"div\", null, ownership.map(data => __jsx(\"div\", {\n    style: ownershipPlayerStyle\n  }, data.player, \" - \", data.count, \" - \", data.percentage, \"%\")))), __jsx(Card, null, !!results.length && __jsx(\"div\", null, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, results.length, \" lineups\"), __jsx(\"button\", {\n    onClick: exportToCSV\n  }, \"Export\"), __jsx(\"div\", {\n    style: containerStyle\n  }, results.map(lineupFormats[sport][site][type]))))));\n};\n\nexport default Lineups;","map":null,"metadata":{},"sourceType":"module"}