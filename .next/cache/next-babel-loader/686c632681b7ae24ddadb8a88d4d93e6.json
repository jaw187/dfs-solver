{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Head from 'next/head';\nimport Header from '../components/header';\nimport ImportProjection from '../components/importprojection.js';\nimport SlatePicker from '../components/slatepicker';\nimport StackBuilder from '../components/stackbuilder';\nimport Generator from '../components/generator';\nimport Pool from '../components/pool';\nimport Navigation from '../components/navigation';\nimport Lineups from '../components/lineups';\nimport { withRedux } from '../lib/redux';\nimport fetch from 'isomorphic-unfetch';\nvar slates = {};\nvar supportedSports = ['NFL', 'GOLF'];\nvar supportedGameTypes = ['Classic'];\n\nvar getPlayers =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(slate) {\n    var draftGroupId, playersRes, playerIds, rawPlayers, players;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(supportedSports.includes(slate.Sport) && slate.GameType && supportedGameTypes.includes(slate.GameType.Name))) {\n              _context.next = 13;\n              break;\n            }\n\n            draftGroupId = slate.DraftGroupId;\n\n            if (slates[draftGroupId]) {\n              _context.next = 13;\n              break;\n            }\n\n            //Handle errrrrsssds\n            console.log(\"http://api.draftkings.com/draftgroups/v1/draftgroups/\".concat(draftGroupId, \"/draftables?format=json\"));\n            _context.next = 6;\n            return fetch(\"http://api.draftkings.com/draftgroups/v1/draftgroups/\".concat(draftGroupId, \"/draftables?format=json\"), {\n              mode: 'no-cors'\n            });\n\n          case 6:\n            playersRes = _context.sent;\n            playerIds = [];\n            _context.next = 10;\n            return playersRes.json();\n\n          case 10:\n            rawPlayers = _context.sent;\n            players = rawPlayers && rawPlayers.draftables && rawPlayers.draftables.filter(function (player) {\n              var id = player.playerId;\n\n              if (playerIds.includes(id)) {\n                return false;\n              }\n\n              playerIds.push(id);\n              return true;\n            });\n            slates[draftGroupId] = _objectSpread({}, slate, {\n              players: players\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPlayers(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar containerStyle = {\n  backgroundColor: '#f6f6f6',\n  height: '100%',\n  width: '100%'\n};\nvar topBarStyle = {\n  backgroundColor: '#ffffff',\n  margin: '0px 0px 16px 0px',\n  padding: 16,\n  display: 'flex',\n  flexDirection: 'row',\n  boxShadow: '1px 1px 17px -1px hsla(0, 0%, 63%, .69)'\n};\n\nvar Index = function Index() {\n  return __jsx(\"div\", {\n    style: containerStyle,\n    className: \"jsx-2111231969\"\n  }, __jsx(Head, null, __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1\",\n    className: \"jsx-2111231969\"\n  }), __jsx(\"meta\", {\n    charSet: \"utf-8\",\n    className: \"jsx-2111231969\"\n  }), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Ubuntu&display=swap\",\n    rel: \"stylesheet\",\n    className: \"jsx-2111231969\"\n  })), __jsx(_JSXStyle, {\n    id: \"2111231969\"\n  }, [\"body{background:#f6f6f6;color:#333;margin:0;padding:0;font-family:'Ubuntu';overflow-x:scroll;}\"]), __jsx(\"div\", {\n    style: topBarStyle,\n    className: \"jsx-2111231969\"\n  }, __jsx(Header, null), __jsx(Navigation, null)), __jsx(SlatePicker, null), __jsx(ImportProjection, null), __jsx(Pool, null), __jsx(StackBuilder, null), __jsx(Generator, null), __jsx(Lineups, null), __jsx(\"img\", {\n    src: \"https://logs-01.loggly.com/inputs/8a465978-add2-4b58-9d57-02f8869b2f17.gif?source=pixel&data=wut\",\n    className: \"jsx-2111231969\"\n  }));\n}; // This is to try and stop spamming DK\n\n\nvar fetched = false;\nvar fetching = false;\nvar refreshSlatesRate = 1000 * 60 * 60;\n\nvar clearSlates = function clearSlates() {\n  _Object$keys(slates).forEach(function (slate) {\n    delete slates[slate];\n  });\n\n  fetched = false;\n  fetching = false;\n};\n\nsetInterval(clearSlates, refreshSlatesRate);\n\nIndex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref2) {\n    var reduxStore, res, rawSlates, dispatch;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            reduxStore = _ref2.reduxStore;\n\n            if (!(!fetched && !fetching)) {\n              _context2.next = 13;\n              break;\n            }\n\n            fetching = true; // Handle errrrrs\n            // Get all slates\n            // Needs to be improved such that each request doesn't trigger an outgoing request\n\n            console.log('getting slates');\n            _context2.next = 6;\n            return fetch('https://www.draftkings.com/lineup/getupcomingcontestinfo', {\n              method: 'post',\n              mode: 'no-cors'\n            });\n\n          case 6:\n            res = _context2.sent;\n            _context2.next = 9;\n            return res.json();\n\n          case 9:\n            rawSlates = _context2.sent;\n            _context2.next = 12;\n            return _Promise.all(rawSlates.map(getPlayers));\n\n          case 12:\n            fetched = true;\n\n          case 13:\n            dispatch = reduxStore.dispatch;\n            console.log('setting slates'); //, slates)\n\n            dispatch({\n              type: 'SET_SLATES',\n              payload: slates\n            });\n            return _context2.abrupt(\"return\", {});\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRedux(Index);","map":null,"metadata":{},"sourceType":"module"}