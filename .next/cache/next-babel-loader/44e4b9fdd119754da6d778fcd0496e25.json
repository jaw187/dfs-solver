{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jwesto1/Code/jaw187/dfs-solver/components/pool.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Card from \"./card\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Slider from '@material-ui/core/Slider';\nimport Collapse from '@material-ui/core/Collapse';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const {\n    slates,\n    selectedSlate,\n    pool,\n    view,\n    projection,\n    poolSalaryRange,\n    showPoolTools\n  } = useSelector(state => state, shallowEqual);\n\n  const addPlayerToPool = player => dispatch({\n    type: \"ADD_PLAYER_TO_POOL\",\n    payload: player\n  });\n\n  const removePlayerFromPool = player => dispatch({\n    type: \"REMOVE_PLAYER_FROM_POOL\",\n    payload: player\n  });\n\n  const clearPool = () => dispatch({\n    type: \"CLEAR_POOL\"\n  });\n\n  const setPoolSalaryRange = range => dispatch({\n    type: \"SET_POOL_SALARY_RANGE\",\n    payload: range\n  });\n\n  const togglePoolTools = () => dispatch({\n    type: \"TOGGLE_POOL_TOOLS\"\n  });\n\n  return {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange,\n    showPoolTools,\n    togglePoolTools\n  };\n};\n\nconst Pool = () => {\n  const {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange = [2500, 13000],\n    showPoolTools,\n    togglePoolTools\n  } = getState();\n\n  if (view !== 'playerpool') {\n    return null;\n  }\n\n  const slate = slates && slates[selectedSlate];\n\n  if (!slate) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Pick a slate first\");\n  }\n\n  const poolPositions = {};\n  slate.players.forEach(player => {\n    const positions = player.position.split('/');\n    positions.forEach(position => {\n      if (!poolPositions[position]) {\n        poolPositions[position] = [];\n      }\n\n      poolPositions[position].push(player);\n    });\n  });\n\n  const togglePlayer = player => {\n    return () => {\n      const inPool = pool && !!pool.find(poolPlayer => player.playerId === poolPlayer.playerId);\n\n      if (inPool) {\n        return removePlayerFromPool(player);\n      }\n\n      addPlayerToPool(player);\n    };\n  };\n\n  const checkboxes = [];\n\n  const clear = () => {\n    checkboxes.forEach(checkbox => {\n      checkbox.current.checked = false;\n    });\n    clearPool();\n  };\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  const componentContainer = {\n    padding: 16\n  };\n\n  const positionCard = which => {\n    const players = poolPositions[which];\n\n    if (!players) {\n      return null;\n    }\n\n    const playerContainerStyle = {\n      whiteSpace: 'nowrap',\n      fontSize: 12\n    };\n\n    const missingProjectionStyle = _objectSpread({}, playerContainerStyle, {\n      color: 'red'\n    });\n\n    const checkboxStyle = {\n      marginRight: 8\n    };\n    return __jsx(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      style: {\n        marginTop: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, which.toUpperCase()), players && players.map((player, i) => {\n      const ref = React.createRef();\n      checkboxes.push(ref);\n      const hasProjection = projection && projection.filter(row => row.player == player.draftableId).length === 1;\n      const style = hasProjection ? playerContainerStyle : missingProjectionStyle;\n      const inPool = pool && !!pool.find(poolPlayer => player.playerId === poolPlayer.playerId);\n      return __jsx(\"div\", {\n        style: style,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        ref: ref,\n        style: checkboxStyle,\n        type: \"checkbox\",\n        onClick: togglePlayer(player),\n        checked: inPool,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), player.displayName, \" - $\", player.salary));\n    }));\n  };\n\n  const games = slate;\n\n  const valuetext = value => {\n    return `$${value}`;\n  };\n\n  const setRange = (event, range) => {\n    setPoolSalaryRange(range);\n  };\n\n  const marks = [{\n    value: 3000,\n    label: '$3,000'\n  }, {\n    value: 5500,\n    label: '$5,500'\n  }, {\n    value: 10000,\n    label: '$10,000'\n  }];\n  return __jsx(\"div\", {\n    style: componentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Player Pool\"), __jsx(\"div\", {\n    style: cardContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, positionCard(\"QB\"), positionCard(\"RB\"), positionCard(\"WR\"), positionCard(\"TE\"), positionCard(\"DST\"), positionCard(\"G\")));\n};\n\nexport default Pool;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/components/pool.js"],"names":["React","Card","useSelector","useDispatch","shallowEqual","Checkbox","Button","InputLabel","MenuItem","FormControl","Select","Slider","Collapse","getState","dispatch","slates","selectedSlate","pool","view","projection","poolSalaryRange","showPoolTools","state","addPlayerToPool","player","type","payload","removePlayerFromPool","clearPool","setPoolSalaryRange","range","togglePoolTools","Pool","slate","poolPositions","players","forEach","positions","position","split","push","togglePlayer","inPool","find","poolPlayer","playerId","checkboxes","clear","checkbox","current","checked","cardContainer","display","flexDirection","componentContainer","padding","positionCard","which","playerContainerStyle","whiteSpace","fontSize","missingProjectionStyle","color","checkboxStyle","marginRight","marginTop","toUpperCase","map","i","ref","createRef","hasProjection","filter","row","draftableId","length","style","displayName","salary","games","valuetext","value","setRange","event","marks","label"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from \"./card\"\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Slider from '@material-ui/core/Slider';\nimport Collapse from '@material-ui/core/Collapse';\n\n\nconst getState = () => {\n  const dispatch = useDispatch();\n\n  const { slates, selectedSlate, pool, view, projection, poolSalaryRange, showPoolTools } = useSelector(state => state, shallowEqual);\n\n  const addPlayerToPool = (player) => dispatch({ type: \"ADD_PLAYER_TO_POOL\", payload: player});\n  const removePlayerFromPool = (player) => dispatch({ type: \"REMOVE_PLAYER_FROM_POOL\", payload: player });\n  const clearPool = () => dispatch({ type: \"CLEAR_POOL\" });\n  const setPoolSalaryRange = (range) => dispatch({ type: \"SET_POOL_SALARY_RANGE\", payload: range });\n  const togglePoolTools = () => dispatch({ type: \"TOGGLE_POOL_TOOLS\"});\n\n  return {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange,\n    showPoolTools,\n    togglePoolTools\n  }\n}\n\nconst Pool = () => {\n  const {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange = [2500,13000],\n    showPoolTools,\n    togglePoolTools\n  } = getState();\n\n  if (view !== 'playerpool') {\n    return null;\n  }\n\n  const slate = slates && slates[selectedSlate];\n\n  if (!slate) {\n    return (\n      <div>Pick a slate first</div>\n    )\n  }\n\n  const poolPositions = {};\n  slate.players.forEach((player) => {\n    const positions = player.position.split('/');\n    positions.forEach((position) => {\n      if (!poolPositions[position]) {\n        poolPositions[position] = [];\n      }\n\n      poolPositions[position].push(player);\n    });\n  });\n\n  const togglePlayer = (player) => {\n    return () => {\n      const inPool = pool && !!pool.find((poolPlayer) => player.playerId === poolPlayer.playerId);\n\n      if (inPool) {\n        return removePlayerFromPool(player);\n      }\n\n      addPlayerToPool(player);\n    };\n  };\n\n  const checkboxes = [];\n\n  const clear = () => {\n    checkboxes.forEach((checkbox) => {\n      checkbox.current.checked = false;\n    });\n    clearPool();\n  };\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n\n  const componentContainer = {\n    padding: 16\n  };\n\n  const positionCard = (which) => {\n    const players = poolPositions[which];\n\n    if (!players) {\n      return null;\n    }\n\n    const playerContainerStyle = {\n      whiteSpace: 'nowrap',\n      fontSize: 12\n    };\n\n    const missingProjectionStyle = {\n      ...playerContainerStyle,\n      color: 'red'\n    };\n\n    const checkboxStyle = {\n      marginRight: 8\n    };\n\n    return (\n      <Card>\n        <h3 style={{ marginTop: 0 }}>{which.toUpperCase()}</h3>\n        {\n          players && players.map((player, i) => {\n            const ref = React.createRef();\n            checkboxes.push(ref);\n\n            const hasProjection = projection && projection.filter((row) => row.player == player.draftableId).length === 1;\n            const style = hasProjection ? playerContainerStyle : missingProjectionStyle;\n\n            const inPool = pool && !!pool.find((poolPlayer) => player.playerId === poolPlayer.playerId);\n            return (\n              <div style={style} key={i}>\n                <label>\n                  <input ref={ref} style={checkboxStyle} type=\"checkbox\" onClick={togglePlayer(player)} checked={inPool} />{player.displayName} - ${player.salary}\n                </label>\n              </div>\n            )\n          })\n        }\n      </Card>\n    );\n  };\n\n  const games = slate;\n  const valuetext = (value) => {\n    return `$${value}`;\n  };\n\n  const setRange = (event, range) => {\n    setPoolSalaryRange(range)\n  }\n\n  const marks = [\n    {\n      value: 3000,\n      label: '$3,000'\n    },\n    {\n      value: 5500,\n      label: '$5,500'\n    },\n    {\n      value: 10000,\n      label: '$10,000'\n    }\n  ];\n\n  return (\n    <div style={componentContainer}>\n      <h2 style={{ marginTop: 0 }}>Player Pool</h2>\n        {/* {\n          showPoolTools && (\n            <div style={cardContainer}>\n              <Card>\n                <h3 style={{ marginTop: 0 }}>Filters</h3>\n                <FormControl style={{ minWidth: 120,  }}>\n                  <InputLabel id=\"select-label\">Games</InputLabel>\n                  <Select labelId=\"select-label\">\n                  {\n      console.log(slate)\n                  }\n                    <MenuItem value=\"foo\">BAR</MenuItem>\n                  </Select>\n                </FormControl>\n\n                <div style={{ marginTop: 48, minWidth: 240 }}>\n                  Salary range\n                  <Slider\n                    value={poolSalaryRange}\n                    valueLabelDisplay=\"auto\"\n                    getAriaValueText={valuetext}\n                    onChange={setRange}\n                    min={2500}\n                    max={13000}\n                    step={100}\n                    marks={marks}\n                  />\n                </div>\n              </Card>\n              <Card>\n                <h3 style={{ marginTop: 0 }}>Clear</h3>\n                <div>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={clear}>Remove All Players From Pool</Button>\n                </div>\n                <h3>Hide</h3>\n                <Button variant=\"contained\" color=\"primary\" onClick={togglePoolTools}>Hide Tools</Button>\n              </Card>\n\n            </div>\n          )\n        }\n\n        {\n          !showPoolTools && (\n            <div style={cardContainer}>\n              <Card>\n                <h3 style={{ marginTop: 0 }}>Tools</h3>\n                <Button variant=\"contained\" color=\"primary\" onClick={togglePoolTools}>Show Tools</Button>\n              </Card>\n            </div>\n          )\n        } */}\n      <div style={cardContainer}>\n        { positionCard(\"QB\") }\n        { positionCard(\"RB\") }\n        { positionCard(\"WR\") }\n        { positionCard(\"TE\") }\n        { positionCard(\"DST\") }\n        { positionCard(\"G\") }\n      </div>\n    </div>\n  );\n};\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}