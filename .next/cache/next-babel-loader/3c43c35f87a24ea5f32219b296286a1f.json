{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport OwnershipWatcher from '../solver/ownership';\nimport clone from 'lodash/clone';\nvar Models = Solver.Models,\n    players = Solver.players,\n    Worker = Solver.Worker;\n\nvar getState = function getState() {\n  var dispatch = useDispatch();\n  var stacks = useSelector(function (state) {\n    return state.stacks;\n  }, shallowEqual);\n  var stackCounts = useSelector(function (state) {\n    return state.stackCounts;\n  }, shallowEqual);\n  var slates = useSelector(function (state) {\n    return state.slates;\n  }, shallowEqual);\n  var selectedSlate = useSelector(function (state) {\n    return state.selectedSlate;\n  });\n  var projection = useSelector(function (state) {\n    return state.projection;\n  });\n  var results = useSelector(function (state) {\n    return state.results;\n  });\n  var pool = useSelector(function (state) {\n    return state.pool;\n  });\n  var view = useSelector(function (state) {\n    return state.view;\n  });\n\n  var addResults = function addResults(results) {\n    dispatch({\n      type: 'ADD_RESULT',\n      payload: results\n    });\n  };\n\n  return {\n    stacks: stacks,\n    stackCounts: stackCounts,\n    slates: slates,\n    selectedSlate: selectedSlate,\n    projection: projection,\n    addResults: addResults,\n    results: results,\n    pool: pool,\n    view: view\n  };\n};\n\nvar Generator = function Generator() {\n  var _getState = getState(),\n      stacks = _getState.stacks,\n      stackCounts = _getState.stackCounts,\n      slates = _getState.slates,\n      selectedSlate = _getState.selectedSlate,\n      projection = _getState.projection,\n      addResults = _getState.addResults,\n      results = _getState.results,\n      pool = _getState.pool,\n      view = _getState.view;\n\n  if (view !== 'generator') {\n    return null;\n  }\n\n  if (!projection || stacks.length === 0) {\n    var issues = [];\n\n    if (stacks.length === 0) {\n      issues.push(__jsx(\"div\", null, \"You need to create stacks first\"));\n    }\n\n    if (!projection) {\n      issues.push(__jsx(\"div\", null, \"You need to import projections first\"));\n    }\n\n    return __jsx(\"div\", null, issues.map(function (issue) {\n      return __jsx(\"div\", null, issue);\n    }));\n  }\n\n  var slate = slates && slates[selectedSlate];\n  var sport = slate.Sport.toLowerCase();\n  var site = 'draftkings';\n  var type = slate.GameType.Name.toLowerCase();\n\n  var generate = function generate() {\n    var playersForModel = players.convertPlayers(pool, projection, sport, site, type);\n    var n = 0;\n    stackCounts.forEach(function (count) {\n      n = n + count;\n    });\n    var worker = new Worker();\n    stacks.forEach(function (stack, i) {\n      var stackPlayers = clone(playersForModel);\n      var model = Models[sport][site][type](stackPlayers); // Force players in stack into lineup\n\n      stack.forEach(function (player) {\n        return model.constraints[player.draftableId] = {\n          equal: 1\n        };\n      });\n      var ownershipOptions = {\n        players: stackPlayers,\n        n: stackCounts[i],\n        stack: stack\n      };\n      worker.postMessage({\n        action: 'ownership',\n        options: ownershipOptions\n      });\n      var enqueueOptions = {\n        action: 'enqueue',\n        n: stackCounts[i],\n        maxIterations: 500,\n        model: model,\n        players: stackPlayers,\n        sport: sport,\n        site: site,\n        type: type\n      };\n      worker.postMessage(enqueueOptions);\n    });\n    worker.postMessage({\n      action: 'solve'\n    });\n    worker.addEventListener('message', function (event) {\n      var results = event.data;\n\n      if (results.length) {\n        addResults(results);\n      }\n    });\n  };\n\n  var formatPlayer = function formatPlayer(draftableId) {\n    var player = slate.players.find(function (player) {\n      return player.draftableId == draftableId;\n    });\n\n    if (!player) {\n      return draftableId;\n    }\n\n    return \"\".concat(player.position, \" - \").concat(player.displayName, \" - \").concat(player.salary);\n  };\n\n  return __jsx(Card, null, __jsx(\"h2\", null, \"Generator\"), __jsx(\"button\", {\n    onClick: generate\n  }, \"Generateee\"), __jsx(\"ul\", null, stacks.map(function (stack, i) {\n    return __jsx(\"li\", {\n      key: i\n    }, \"Stack with \", stackCounts[i], \" lineups\");\n  })));\n};\n\nexport default Generator;","map":null,"metadata":{},"sourceType":"module"}