{"ast":null,"code":"const solver = require('javascript-lp-solver');\n\nconst formaters = require('./formaters');\n\nmodule.exports.solve = (n, maxIterations, model, ownership, players, sport, site, type) => {\n  const format = formaters[sport][site][type](players);\n  const results = [];\n  let i = 0;\n\n  const go = () => {\n    ++i;\n    const solution = solver.Solve(model);\n    console.log(`Iteration ${i} is ${solution.feasible ? '' : 'not'} feasible`);\n    console.log('ownership - solver', ownership);\n\n    if (!solution.feasible) {\n      return {\n        notFeasible: true\n      };\n    } // Prevents finding solutions which have the same total points\n\n\n    model.constraints.pointz.max = solution.result - 1;\n    const result = format(solution); // Test if lineup is allowed as per ownership\n\n    if (!ownership.validate(result.players)) {\n      return {};\n    }\n\n    ownership.update(result.players);\n    results.push(result);\n    return {};\n  };\n\n  const isDone = () => {\n    return i === maxIterations || results.length === n;\n  };\n\n  return {\n    go,\n    isDone,\n    results\n  };\n  /*\n    for (let i = 0; i < maxIterations; ++i) {\n      const solution = solver.Solve(model);\n      console.log(`Iteration ${i + 1} is ${solution.feasible ? '' : 'not'} feasible`);\n      if (!solution.feasible) {\n        break;\n      }\n  \n      // Prevents finding solutions which have the same total points\n      model.constraints.pointz.max = solution.result - 1;\n  \n      const result = format(solution);\n  \n      // Test if lineup is allowed as per ownership\n      if (!ownership.validate(result.players)) {\n        continue;\n      }\n  \n      results.push(result);\n      ownership.update(result.players);\n  \n      if (results.length === n) {\n        break;\n      }\n    }\n  \n    return results;\n    */\n};","map":null,"metadata":{},"sourceType":"script"}