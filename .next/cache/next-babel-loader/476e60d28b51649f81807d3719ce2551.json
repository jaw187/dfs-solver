{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Card from \"./card\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Slider from '@material-ui/core/Slider';\nimport Collapse from '@material-ui/core/Collapse';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const {\n    slates,\n    selectedSlate,\n    pool,\n    view,\n    projection,\n    poolSalaryRange,\n    showPoolTools\n  } = useSelector(state => state, shallowEqual);\n\n  const addPlayerToPool = player => dispatch({\n    type: \"ADD_PLAYER_TO_POOL\",\n    payload: player\n  });\n\n  const removePlayerFromPool = player => dispatch({\n    type: \"REMOVE_PLAYER_FROM_POOL\",\n    payload: player\n  });\n\n  const clearPool = () => dispatch({\n    type: \"CLEAR_POOL\"\n  });\n\n  const setPoolSalaryRange = range => dispatch({\n    type: \"SET_POOL_SALARY_RANGE\",\n    payload: range\n  });\n\n  const togglePoolTools = () => dispatch({\n    type: \"TOGGLE_POOL_TOOLS\"\n  });\n\n  return {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange,\n    showPoolTools,\n    togglePoolTools\n  };\n};\n\nconst Pool = () => {\n  const {\n    slates,\n    selectedSlate,\n    pool,\n    addPlayerToPool,\n    removePlayerFromPool,\n    view,\n    projection,\n    clearPool,\n    setPoolSalaryRange,\n    poolSalaryRange = [2500, 13000],\n    showPoolTools,\n    togglePoolTools\n  } = getState();\n\n  if (view !== 'playerpool') {\n    return null;\n  }\n\n  const slate = slates && slates[selectedSlate];\n\n  if (!slate) {\n    return __jsx(\"div\", null, \"Pick a slate first\");\n  }\n\n  const poolPositions = {};\n  slate.players.forEach(player => {\n    const positions = player.position.split('/');\n    positions.forEach(position => {\n      if (!poolPositions[position]) {\n        poolPositions[position] = [];\n      }\n\n      poolPositions[position].push(player);\n    });\n  });\n\n  const togglePlayer = player => {\n    return () => {\n      const inPool = pool && !!pool.find(poolPlayer => player.playerId === poolPlayer.playerId);\n\n      if (inPool) {\n        return removePlayerFromPool(player);\n      }\n\n      addPlayerToPool(player);\n    };\n  };\n\n  const checkboxes = [];\n\n  const clear = () => {\n    checkboxes.forEach(checkbox => {\n      checkbox.current.checked = false;\n    });\n    clearPool();\n  };\n\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  const componentContainer = {\n    padding: 16\n  };\n\n  const positionCard = which => {\n    const players = poolPositions[which];\n\n    if (!players) {\n      return null;\n    }\n\n    const playerContainerStyle = {\n      whiteSpace: 'nowrap',\n      fontSize: 12\n    };\n\n    const missingProjectionStyle = _objectSpread({}, playerContainerStyle, {\n      color: 'red'\n    });\n\n    const checkboxStyle = {\n      marginRight: 8\n    };\n    return __jsx(Card, null, __jsx(\"h3\", {\n      style: {\n        marginTop: 0\n      }\n    }, which.toUpperCase()), players && players.map((player, i) => {\n      const ref = React.createRef();\n      checkboxes.push(ref);\n      const hasProjection = projection && projection.filter(row => row.player == player.draftableId).length === 1;\n      const style = hasProjection ? playerContainerStyle : missingProjectionStyle;\n      const inPool = pool && !!pool.find(poolPlayer => player.playerId === poolPlayer.playerId);\n      return __jsx(\"div\", {\n        style: style,\n        key: i\n      }, __jsx(\"label\", null, __jsx(\"input\", {\n        ref: ref,\n        style: checkboxStyle,\n        type: \"checkbox\",\n        onClick: togglePlayer(player),\n        checked: inPool\n      }), player.displayName, \" - $\", player.salary));\n    }));\n  };\n\n  const games = slate;\n\n  const valuetext = value => {\n    return `$${value}`;\n  };\n\n  const setRange = (event, range) => {\n    setPoolSalaryRange(range);\n  };\n\n  const marks = [{\n    value: 3000,\n    label: '$3,000'\n  }, {\n    value: 5500,\n    label: '$5,500'\n  }, {\n    value: 10000,\n    label: '$10,000'\n  }];\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Player Pool\"), __jsx(\"div\", {\n    style: cardContainer\n  }, positionCard(\"QB\"), positionCard(\"RB\"), positionCard(\"WR\"), positionCard(\"TE\"), positionCard(\"DST\"), positionCard(\"G\")));\n};\n\nexport default Pool;","map":null,"metadata":{},"sourceType":"module"}