{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Card from './card';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Solver from \"../solver/index\";\nimport { log } from './utils';\nvar solve = Solver.solve,\n    Models = Solver.Models,\n    players = Solver.players;\n\nvar getState = function getState() {\n  var dispatch = useDispatch();\n  var slates = useSelector(function (state) {\n    return state.slates;\n  }, shallowEqual);\n  var selectedSlate = useSelector(function (state) {\n    return state.selectedSlate;\n  });\n  var projection = useSelector(function (state) {\n    return state.projection;\n  });\n  var results = useSelector(function (state) {\n    return state.results;\n  });\n  var view = useSelector(function (state) {\n    return state.view;\n  });\n\n  var removeLineup = function removeLineup(i) {\n    dispatch({\n      type: 'REMOVE_RESULT',\n      payload: i\n    });\n  };\n\n  return {\n    slates: slates,\n    selectedSlate: selectedSlate,\n    projection: projection,\n    results: results,\n    view: view,\n    removeLineup: removeLineup\n  };\n};\n\nvar Lineups = function Lineups() {\n  var _getState = getState(),\n      slates = _getState.slates,\n      selectedSlate = _getState.selectedSlate,\n      projection = _getState.projection,\n      results = _getState.results,\n      view = _getState.view,\n      removeLineup = _getState.removeLineup;\n\n  if (view !== 'results') {\n    return null;\n  }\n\n  if (results.length === 0) {\n    return __jsx(\"div\", null, \"Generate some lineups\");\n  }\n\n  var slate = slates && slates[selectedSlate];\n  var sport = slate.Sport.toLowerCase();\n  var site = 'draftkings';\n  var type = slate.GameType.Name.toLowerCase();\n\n  var formatPlayer = function formatPlayer(lineupPlayer) {\n    var player = slate.players.find(function (player) {\n      return player.draftableId == lineupPlayer.id;\n    });\n\n    if (!player) {\n      return lineupPlayer.id;\n    }\n\n    return \"\".concat(player.position, \" - \").concat(player.displayName, \" - $\").concat(player.salary);\n  };\n\n  var headers = {\n    nfl: {\n      draftkings: {\n        classic: \"QB,RB,RB,WR,WR,WR,TE,FLEX,DST\\n\"\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: \"G,G,G,G,G,G\\n\"\n      }\n    }\n  };\n  var exporters = {\n    nfl: {\n      draftkings: {\n        classic: function classic(result) {\n          var _result$lineup = result.lineup,\n              qb = _result$lineup.qb,\n              rbs = _result$lineup.rbs,\n              wrs = _result$lineup.wrs,\n              te = _result$lineup.te,\n              flex = _result$lineup.flex,\n              dst = _result$lineup.dst;\n          return \"\".concat(qb.id, \",\").concat(rbs[0].id, \",\").concat(rbs[1].id, \",\").concat(wrs[0].id, \",\").concat(wrs[1].id, \",\").concat(wrs[2].id, \",\").concat(te.id, \",\").concat(flex.id, \",\").concat(dst.id);\n        }\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: function classic(result) {\n          var g = result.lineup.g;\n          return \"\".concat(g[0].id, \",\").concat(g[1].id, \",\").concat(g[2].id, \",\").concat(g[3].id, \",\").concat(g[4].id, \",\").concat(g[5].id);\n        }\n      }\n    }\n  };\n\n  var exportToCSV = function exportToCSV() {\n    log('export linieups');\n    var header = headers[sport][site][type];\n    var csv = \"data:text/csv;charset=utf-8,\" + header + results.map(exporters[sport][site][type]).join('\\n');\n    var _window = window,\n        encodeURI = _window.encodeURI;\n    var downloadLink = document.createElement(\"a\");\n    downloadLink.href = encodeURI(csv);\n    downloadLink.download = \"\".concat(selectedSlate, \" - Lineups.csv\");\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  var remove = function remove(i) {\n    log('remove lineup');\n    return function () {\n      return removeLineup(i);\n    };\n  };\n\n  var containerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  };\n  var lineupStyle = {\n    padding: 16,\n    margin: 8,\n    backgroundColor: \"#f3f3f3\",\n    border: '1px solid #DDD',\n    fontSize: 12\n  };\n  var cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  var componentContainer = {\n    padding: 16\n  };\n  var playerCounts = {};\n  results.forEach(function (result) {\n    result.players.forEach(function (player) {\n      if (!playerCounts[player]) {\n        playerCounts[player] = 0;\n      }\n\n      ++playerCounts[player];\n    });\n  });\n\n  var ownership = _Object$keys(playerCounts).map(function (player) {\n    return {\n      player: formatPlayer({\n        id: player\n      }),\n      count: playerCounts[player],\n      percentage: (playerCounts[player] / results.length * 100).toFixed(0)\n    };\n  });\n\n  var ownershipPlayerStyle = {\n    whiteSpace: 'nowrap'\n  };\n  var lineupFormats = {\n    nfl: {\n      draftkings: {\n        classic: function classic(result, i) {\n          return __jsx(\"div\", {\n            key: i,\n            style: lineupStyle\n          }, __jsx(\"button\", {\n            onClick: remove(i)\n          }, \"Remove\"), __jsx(\"div\", null, formatPlayer(result.lineup.qb)), __jsx(\"div\", null, formatPlayer(result.lineup.rbs[0])), __jsx(\"div\", null, formatPlayer(result.lineup.rbs[1])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[0])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[1])), __jsx(\"div\", null, formatPlayer(result.lineup.wrs[2])), __jsx(\"div\", null, formatPlayer(result.lineup.te)), __jsx(\"div\", null, formatPlayer(result.lineup.flex)), __jsx(\"div\", null, formatPlayer(result.lineup.dst)));\n        }\n      }\n    },\n    golf: {\n      draftkings: {\n        classic: function classic(result, i) {\n          return __jsx(\"div\", {\n            key: i,\n            style: lineupStyle\n          }, __jsx(\"button\", {\n            onClick: remove(i)\n          }, \"Remove\"), __jsx(\"div\", null, formatPlayer(result.lineup.g[0])), __jsx(\"div\", null, formatPlayer(result.lineup.g[1])), __jsx(\"div\", null, formatPlayer(result.lineup.g[2])), __jsx(\"div\", null, formatPlayer(result.lineup.g[3])), __jsx(\"div\", null, formatPlayer(result.lineup.g[4])), __jsx(\"div\", null, formatPlayer(result.lineup.g[5])));\n        }\n      }\n    }\n  };\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Lineups\"), __jsx(\"div\", {\n    style: cardContainer\n  }, __jsx(Card, null, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Ownership\"), !!ownership.length && __jsx(\"div\", null, ownership.map(function (data) {\n    return __jsx(\"div\", {\n      style: ownershipPlayerStyle\n    }, data.player, \" - \", data.count, \" - \", data.percentage, \"%\");\n  }))), __jsx(Card, null, !!results.length && __jsx(\"div\", null, __jsx(\"h3\", {\n    style: {\n      marginTop: 0\n    }\n  }, results.length, \" lineups\"), __jsx(\"button\", {\n    onClick: exportToCSV\n  }, \"Export\"), __jsx(\"div\", {\n    style: containerStyle\n  }, results.map(lineupFormats[sport][site][type]))))));\n};\n\nexport default Lineups;","map":null,"metadata":{},"sourceType":"module"}