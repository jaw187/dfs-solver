{"ast":null,"code":"const solver = require('javascript-lp-solver');\n\nconst formaters = require('./formaters');\n\nmodule.exports.solve = (n, maxIterations, model, ownership, players, sport, site, type) => {\n  const format = formaters[sport][site][type](players);\n  const results = [];\n  let i = 0;\n\n  const go = () => {\n    ++i;\n    const solution = solver.Solve(model);\n    console.log(`Iteration ${i} is ${solution.feasible ? '' : 'not'} feasible`);\n    console.log('ownership - solver', ownership);\n\n    if (!solution.feasible) {\n      return {\n        notFeasible: true\n      };\n    } // Prevents finding solutions which have the same total points\n\n\n    model.constraints.pointz.max = solution.result - 1;\n    const result = format(solution); // Test if lineup is allowed as per ownership\n\n    if (!ownership.validate(result.players)) {\n      return {};\n    }\n\n    ownership.update(result.players);\n    results.push(result);\n    return {};\n  };\n\n  const isDone = () => {\n    return i === maxIterations || results.length === n;\n  };\n\n  return {\n    go,\n    isDone,\n    results\n  };\n  /*\n    for (let i = 0; i < maxIterations; ++i) {\n      const solution = solver.Solve(model);\n      console.log(`Iteration ${i + 1} is ${solution.feasible ? '' : 'not'} feasible`);\n      if (!solution.feasible) {\n        break;\n      }\n  \n      // Prevents finding solutions which have the same total points\n      model.constraints.pointz.max = solution.result - 1;\n  \n      const result = format(solution);\n  \n      // Test if lineup is allowed as per ownership\n      if (!ownership.validate(result.players)) {\n        continue;\n      }\n  \n      results.push(result);\n      ownership.update(result.players);\n  \n      if (results.length === n) {\n        break;\n      }\n    }\n  \n    return results;\n    */\n};","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/solver/solver.js"],"names":["solver","require","formaters","module","exports","solve","n","maxIterations","model","ownership","players","sport","site","type","format","results","i","go","solution","Solve","console","log","feasible","notFeasible","constraints","pointz","max","result","validate","update","push","isDone","length"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuB,CAACC,CAAD,EAAIC,aAAJ,EAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,KAA9C,EAAqDC,IAArD,EAA2DC,IAA3D,KAAoE;AAEzF,QAAMC,MAAM,GAAGZ,SAAS,CAACS,KAAD,CAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BH,OAA7B,CAAf;AAEA,QAAMK,OAAO,GAAG,EAAhB;AAEA,MAAIC,CAAC,GAAG,CAAR;;AACA,QAAMC,EAAE,GAAG,MAAM;AACf,MAAED,CAAF;AACA,UAAME,QAAQ,GAAGlB,MAAM,CAACmB,KAAP,CAAaX,KAAb,CAAjB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAYL,CAAE,OAAME,QAAQ,CAACI,QAAT,GAAoB,EAApB,GAAyB,KAAM,WAAhE;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCZ,SAAlC;;AACA,QAAI,CAACS,QAAQ,CAACI,QAAd,EAAwB;AACtB,aAAO;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAP;AACD,KAPc,CASf;;;AACAf,IAAAA,KAAK,CAACgB,WAAN,CAAkBC,MAAlB,CAAyBC,GAAzB,GAA+BR,QAAQ,CAACS,MAAT,GAAkB,CAAjD;AAEA,UAAMA,MAAM,GAAGb,MAAM,CAACI,QAAD,CAArB,CAZe,CAcf;;AACA,QAAI,CAACT,SAAS,CAACmB,QAAV,CAAmBD,MAAM,CAACjB,OAA1B,CAAL,EAAyC;AACvC,aAAO,EAAP;AACD;;AAEDD,IAAAA,SAAS,CAACoB,MAAV,CAAiBF,MAAM,CAACjB,OAAxB;AACAK,IAAAA,OAAO,CAACe,IAAR,CAAaH,MAAb;AAEA,WAAO,EAAP;AACD,GAvBD;;AAyBA,QAAMI,MAAM,GAAG,MAAM;AACnB,WAAOf,CAAC,KAAKT,aAAN,IAAuBQ,OAAO,CAACiB,MAAR,KAAmB1B,CAAjD;AACD,GAFD;;AAIA,SAAO;AACLW,IAAAA,EADK;AAELc,IAAAA,MAFK;AAGLhB,IAAAA;AAHK,GAAP;AAKF;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BC,CArED","sourcesContent":["const solver = require('javascript-lp-solver');\nconst formaters = require('./formaters');\n\nmodule.exports.solve = (n, maxIterations, model, ownership, players, sport, site, type) => {\n\n  const format = formaters[sport][site][type](players);\n\n  const results = [];\n\n  let i = 0;\n  const go = () => {\n    ++i;\n    const solution = solver.Solve(model);\n    console.log(`Iteration ${i} is ${solution.feasible ? '' : 'not'} feasible`);\n    console.log('ownership - solver', ownership)\n    if (!solution.feasible) {\n      return { notFeasible: true };\n    }\n\n    // Prevents finding solutions which have the same total points\n    model.constraints.pointz.max = solution.result - 1;\n\n    const result = format(solution);\n\n    // Test if lineup is allowed as per ownership\n    if (!ownership.validate(result.players)) {\n      return {};\n    }\n\n    ownership.update(result.players);\n    results.push(result);\n\n    return {};\n  };\n\n  const isDone = () => {\n    return i === maxIterations || results.length === n;\n  };\n\n  return {\n    go,\n    isDone,\n    results\n  };\n/*\n  for (let i = 0; i < maxIterations; ++i) {\n    const solution = solver.Solve(model);\n    console.log(`Iteration ${i + 1} is ${solution.feasible ? '' : 'not'} feasible`);\n    if (!solution.feasible) {\n      break;\n    }\n\n    // Prevents finding solutions which have the same total points\n    model.constraints.pointz.max = solution.result - 1;\n\n    const result = format(solution);\n\n    // Test if lineup is allowed as per ownership\n    if (!ownership.validate(result.players)) {\n      continue;\n    }\n\n    results.push(result);\n    ownership.update(result.players);\n\n    if (results.length === n) {\n      break;\n    }\n  }\n\n  return results;\n  */\n}\n"]},"metadata":{},"sourceType":"script"}