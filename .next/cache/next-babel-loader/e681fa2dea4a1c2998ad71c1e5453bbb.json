{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Card from \"./card\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Stacks from \"./stacks\";\nimport { log } from './utils';\n\nconst getState = () => {\n  const dispatch = useDispatch();\n  const {\n    pool,\n    stack,\n    slates,\n    selectedSlate,\n    view\n  } = useSelector(state => state, shallowEqual);\n\n  const clearStack = () => dispatch({\n    type: \"CLEAR_STACK\"\n  });\n\n  const addStack = () => dispatch({\n    type: \"ADD_STACK\",\n    payload: stack\n  });\n\n  const removeStack = i => dispatch({\n    type: \"REMOVE_STACK\",\n    payload: i\n  });\n\n  const addPlayerToStack = player => dispatch({\n    type: \"ADD_PLAYER_TO_STACK\",\n    payload: player\n  });\n\n  const removePlayerFromStack = player => dispatch({\n    type: \"REMOVE_PLAYER_FROM_STACK\",\n    payload: player\n  });\n\n  return {\n    pool,\n    stack,\n    slate: slates[selectedSlate],\n    clearStack,\n    addStack,\n    removeStack,\n    addPlayerToStack,\n    removePlayerFromStack,\n    view\n  };\n};\n\nconst StackBuilder = () => {\n  const {\n    pool,\n    stack,\n    slate,\n    clearStack,\n    addStack,\n    addPlayerToStack,\n    removePlayerFromStack,\n    view\n  } = getState();\n\n  if (view !== 'stackbuilder') {\n    return null;\n  }\n\n  if (!pool.length) {\n    return __jsx(\"div\", null, \"Pick players for pool first.\");\n  }\n\n  const togglePlayer = player => {\n    return () => {\n      const inStack = stack && !!stack.find(stackPlayer => player.playerId === stackPlayer.playerId);\n\n      if (inStack) {\n        return removePlayerFromStack(player);\n      }\n\n      addPlayerToStack(player);\n    };\n  };\n\n  const checkboxes = [];\n\n  const clear = () => {\n    checkboxes.forEach(checkbox => {\n      checkbox.current.checked = false;\n    });\n    clearStack();\n  };\n\n  const add = () => {\n    log('stack add');\n    addStack();\n    clear();\n  };\n\n  const componentContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: 16\n  };\n  const cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"div\", null, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Stack Builder\"), __jsx(\"div\", {\n    style: cardContainer\n  }, __jsx(Card, null, __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    }\n  }, __jsx(\"div\", {\n    style: {\n      minWidth: 240\n    }\n  }, __jsx(\"h3\", null, \"Players\"), pool && pool.map((player, i) => {\n    const ref = React.createRef();\n    checkboxes.push(ref);\n    return __jsx(\"div\", null, __jsx(\"input\", {\n      ref: ref,\n      type: \"checkbox\",\n      onClick: togglePlayer(player),\n      key: i\n    }), player.displayName, \" - $\", player.salary);\n  })), __jsx(\"div\", {\n    style: {\n      paddingLeft: 16,\n      minWidth: 240\n    }\n  }, __jsx(\"h3\", null, \"Stack\"), __jsx(\"ul\", null, stack && stack.map((player, i) => __jsx(\"li\", {\n    key: i\n  }, player.displayName))), stack && stack.length > 1 && __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: add\n  }, \"Add\"), __jsx(\"button\", {\n    onClick: clear\n  }, \"Clear\")))))))), __jsx(\"div\", null, __jsx(Stacks, null)));\n};\n\nexport default StackBuilder;","map":null,"metadata":{},"sourceType":"module"}