{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nclass OwnershipWatcher {\n  constructor({\n    players,\n    n,\n    stack,\n    lineupStrings\n  }) {\n    const pool = this.pool = players;\n    const lineupsAllowed = {};\n\n    _Object$keys(pool).forEach(player => {\n      const count = pool[player].ownership / 100 * n;\n      lineupsAllowed[player] = count >= 1 ? lineupsAllowed : 1;\n    });\n\n    this.lineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.originalLineupsAllowed = _objectSpread({}, lineupsAllowed);\n    this.stack = stack.map(player => player.draftableId);\n    this.lineupStrings = lineupStrings;\n  }\n\n  update(players) {\n    const {\n      lineupsAllowed,\n      lineupStrings\n    } = this;\n    const lineupString = players.sort((a, b) => a > b).join('');\n    lineupStrings.push(lineupString);\n    players.forEach(player => {\n      --lineupsAllowed[player]; // Remove players from pool\n\n      if (lineupsAllowed[player] < 1 && !this.stack.includes(Number(player))) {\n        delete this.pool[player];\n      }\n    });\n  }\n\n  validate(players) {\n    const {\n      lineupsAllowed,\n      lineupStrings\n    } = this;\n    const lineupString = players.sort((a, b) => a > b).join('');\n\n    if (lineupStrings.includes(lineupString)) {\n      return false;\n    }\n\n    const ineligiblePlayers = players.filter(player => {\n      if (lineupsAllowed[player] < 1) {\n        if (this.stack.includes(Number(player))) {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n    return ineligiblePlayers.length === 0;\n  }\n\n}\n\nmodule.exports = OwnershipWatcher;","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/solver/ownership.js"],"names":["OwnershipWatcher","constructor","players","n","stack","lineupStrings","pool","lineupsAllowed","forEach","player","count","ownership","originalLineupsAllowed","map","draftableId","update","lineupString","sort","a","b","join","push","includes","Number","validate","ineligiblePlayers","filter","length","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,MAAMA,gBAAN,CAAuB;AACrBC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,CAAX;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAF,EAAwC;AACjD,UAAMC,IAAI,GAAG,KAAKA,IAAL,GAAYJ,OAAzB;AAEA,UAAMK,cAAc,GAAG,EAAvB;;AACA,iBAAYD,IAAZ,EAAkBE,OAAlB,CAA2BC,MAAD,IAAY;AACpC,YAAMC,KAAK,GAAIJ,IAAI,CAACG,MAAD,CAAJ,CAAaE,SAAb,GAAuB,GAAxB,GAA+BR,CAA7C;AACAI,MAAAA,cAAc,CAACE,MAAD,CAAd,GAAyBC,KAAK,IAAI,CAAT,GAAaH,cAAb,GAA8B,CAAvD;AACD,KAHD;;AAKA,SAAKA,cAAL,qBAA2BA,cAA3B;AACA,SAAKK,sBAAL,qBAAmCL,cAAnC;AACA,SAAKH,KAAL,GAAaA,KAAK,CAACS,GAAN,CAAWJ,MAAD,IAAYA,MAAM,CAACK,WAA7B,CAAb;AACA,SAAKT,aAAL,GAAqBA,aAArB;AACD;;AAEDU,EAAAA,MAAM,CAACb,OAAD,EAAU;AACd,UAAM;AAAEK,MAAAA,cAAF;AAAkBF,MAAAA;AAAlB,QAAoC,IAA1C;AAEA,UAAMW,YAAY,GAAGd,OAAO,CAACe,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,EAA8BC,IAA9B,CAAmC,EAAnC,CAArB;AACAf,IAAAA,aAAa,CAACgB,IAAd,CAAmBL,YAAnB;AAEAd,IAAAA,OAAO,CAACM,OAAR,CAAiBC,MAAD,IAAY;AAC1B,QAAEF,cAAc,CAACE,MAAD,CAAhB,CAD0B,CAG1B;;AACA,UAAIF,cAAc,CAACE,MAAD,CAAd,GAAyB,CAAzB,IAA8B,CAAE,KAAKL,KAAL,CAAWkB,QAAX,CAAoBC,MAAM,CAACd,MAAD,CAA1B,CAApC,EAA0E;AACxE,eAAO,KAAKH,IAAL,CAAUG,MAAV,CAAP;AACD;AACF,KAPD;AAQD;;AAEDe,EAAAA,QAAQ,CAACtB,OAAD,EAAU;AAChB,UAAM;AAAEK,MAAAA,cAAF;AAAkBF,MAAAA;AAAlB,QAAoC,IAA1C;AACA,UAAMW,YAAY,GAAGd,OAAO,CAACe,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,EAA8BC,IAA9B,CAAmC,EAAnC,CAArB;;AAEA,QAAIf,aAAa,CAACiB,QAAd,CAAuBN,YAAvB,CAAJ,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,UAAMS,iBAAiB,GAAGvB,OAAO,CAACwB,MAAR,CAAgBjB,MAAD,IAAY;AACnD,UAAIF,cAAc,CAACE,MAAD,CAAd,GAAyB,CAA7B,EAAgC;AAC9B,YAAI,KAAKL,KAAL,CAAWkB,QAAX,CAAoBC,MAAM,CAACd,MAAD,CAA1B,CAAJ,EAAyC;AACvC,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KATyB,CAA1B;AAWA,WAAOgB,iBAAiB,CAACE,MAAlB,KAA6B,CAApC;AACD;;AApDoB;;AAuDvBC,MAAM,CAACC,OAAP,GAAiB7B,gBAAjB","sourcesContent":["class OwnershipWatcher {\n  constructor ({ players, n, stack, lineupStrings }) {\n    const pool = this.pool = players;\n\n    const lineupsAllowed = {};\n    Object.keys(pool).forEach((player) => {\n      const count = (pool[player].ownership/100) * n;\n      lineupsAllowed[player] = count >= 1 ? lineupsAllowed : 1;\n    });\n\n    this.lineupsAllowed = { ...lineupsAllowed };\n    this.originalLineupsAllowed = { ...lineupsAllowed };\n    this.stack = stack.map((player) => player.draftableId);\n    this.lineupStrings = lineupStrings;\n  }\n\n  update(players) {\n    const { lineupsAllowed, lineupStrings } = this;\n\n    const lineupString = players.sort((a, b) => a > b).join('');\n    lineupStrings.push(lineupString);\n\n    players.forEach((player) => {\n      --lineupsAllowed[player];\n\n      // Remove players from pool\n      if (lineupsAllowed[player] < 1 && !(this.stack.includes(Number(player)))) {\n        delete this.pool[player];\n      }\n    });\n  }\n\n  validate(players) {\n    const { lineupsAllowed, lineupStrings } = this;\n    const lineupString = players.sort((a, b) => a > b).join('');\n\n    if (lineupStrings.includes(lineupString)) {\n      return false;\n    }\n\n    const ineligiblePlayers = players.filter((player) => {\n      if (lineupsAllowed[player] < 1) {\n        if (this.stack.includes(Number(player))) {\n          return false;\n        }\n        return true;\n      }\n\n      return false;\n    });\n\n    return ineligiblePlayers.length === 0;\n  }\n}\n\nmodule.exports = OwnershipWatcher;\n"]},"metadata":{},"sourceType":"script"}