{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Card from \"./card\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Slider from '@material-ui/core/Slider';\nimport Collapse from '@material-ui/core/Collapse';\n\nvar getState = function getState() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }, shallowEqual),\n      slates = _useSelector.slates,\n      selectedSlate = _useSelector.selectedSlate,\n      pool = _useSelector.pool,\n      view = _useSelector.view,\n      projection = _useSelector.projection,\n      poolSalaryRange = _useSelector.poolSalaryRange,\n      showPoolTools = _useSelector.showPoolTools;\n\n  var addPlayerToPool = function addPlayerToPool(player) {\n    return dispatch({\n      type: \"ADD_PLAYER_TO_POOL\",\n      payload: player\n    });\n  };\n\n  var removePlayerFromPool = function removePlayerFromPool(player) {\n    return dispatch({\n      type: \"REMOVE_PLAYER_FROM_POOL\",\n      payload: player\n    });\n  };\n\n  var clearPool = function clearPool() {\n    return dispatch({\n      type: \"CLEAR_POOL\"\n    });\n  };\n\n  var setPoolSalaryRange = function setPoolSalaryRange(range) {\n    return dispatch({\n      type: \"SET_POOL_SALARY_RANGE\",\n      payload: range\n    });\n  };\n\n  var togglePoolTools = function togglePoolTools() {\n    return dispatch({\n      type: \"TOGGLE_POOL_TOOLS\"\n    });\n  };\n\n  return {\n    slates: slates,\n    selectedSlate: selectedSlate,\n    pool: pool,\n    addPlayerToPool: addPlayerToPool,\n    removePlayerFromPool: removePlayerFromPool,\n    view: view,\n    projection: projection,\n    clearPool: clearPool,\n    setPoolSalaryRange: setPoolSalaryRange,\n    poolSalaryRange: poolSalaryRange,\n    showPoolTools: showPoolTools,\n    togglePoolTools: togglePoolTools\n  };\n};\n\nvar Pool = function Pool() {\n  var _getState = getState(),\n      slates = _getState.slates,\n      selectedSlate = _getState.selectedSlate,\n      pool = _getState.pool,\n      addPlayerToPool = _getState.addPlayerToPool,\n      removePlayerFromPool = _getState.removePlayerFromPool,\n      view = _getState.view,\n      projection = _getState.projection,\n      clearPool = _getState.clearPool,\n      setPoolSalaryRange = _getState.setPoolSalaryRange,\n      _getState$poolSalaryR = _getState.poolSalaryRange,\n      poolSalaryRange = _getState$poolSalaryR === void 0 ? [2500, 13000] : _getState$poolSalaryR,\n      showPoolTools = _getState.showPoolTools,\n      togglePoolTools = _getState.togglePoolTools;\n\n  if (view !== 'playerpool') {\n    return null;\n  }\n\n  var slate = slates && slates[selectedSlate];\n\n  if (!slate) {\n    return __jsx(\"div\", null, \"Pick a slate first\");\n  }\n\n  var poolPositions = {};\n  slate.players.forEach(function (player) {\n    var positions = player.position.split('/');\n    positions.forEach(function (position) {\n      if (!poolPositions[position]) {\n        poolPositions[position] = [];\n      }\n\n      poolPositions[position].push(player);\n    });\n  });\n\n  var togglePlayer = function togglePlayer(player) {\n    return function () {\n      var inPool = pool && !!pool.find(function (poolPlayer) {\n        return player.playerId === poolPlayer.playerId;\n      });\n\n      if (inPool) {\n        return removePlayerFromPool(player);\n      }\n\n      addPlayerToPool(player);\n    };\n  };\n\n  var checkboxes = [];\n\n  var clear = function clear() {\n    checkboxes.forEach(function (checkbox) {\n      checkbox.current.checked = false;\n    });\n    clearPool();\n  };\n\n  var cardContainer = {\n    display: 'flex',\n    flexDirection: 'row'\n  };\n  var componentContainer = {\n    padding: 16\n  };\n\n  var positionCard = function positionCard(which) {\n    var players = poolPositions[which];\n\n    if (!players) {\n      return null;\n    }\n\n    var playerContainerStyle = {\n      whiteSpace: 'nowrap',\n      fontSize: 12\n    };\n\n    var missingProjectionStyle = _objectSpread({}, playerContainerStyle, {\n      color: 'red'\n    });\n\n    var checkboxStyle = {\n      marginRight: 8\n    };\n    return __jsx(Card, null, __jsx(\"h3\", {\n      style: {\n        marginTop: 0\n      }\n    }, which.toUpperCase()), players && players.map(function (player, i) {\n      var ref = React.createRef();\n      checkboxes.push(ref);\n      var hasProjection = projection && projection.filter(function (row) {\n        return row.player == player.draftableId;\n      }).length === 1;\n      var style = hasProjection ? playerContainerStyle : missingProjectionStyle;\n      var inPool = pool && !!pool.find(function (poolPlayer) {\n        return player.playerId === poolPlayer.playerId;\n      });\n      return __jsx(\"div\", {\n        style: style,\n        key: i\n      }, __jsx(\"label\", null, __jsx(\"input\", {\n        ref: ref,\n        style: checkboxStyle,\n        type: \"checkbox\",\n        onClick: togglePlayer(player),\n        checked: inPool\n      }), player.displayName, \" - $\", player.salary));\n    }));\n  };\n\n  var games = slate;\n\n  var valuetext = function valuetext(value) {\n    return \"$\".concat(value);\n  };\n\n  var setRange = function setRange(event, range) {\n    setPoolSalaryRange(range);\n  };\n\n  var marks = [{\n    value: 3000,\n    label: '$3,000'\n  }, {\n    value: 5500,\n    label: '$5,500'\n  }, {\n    value: 10000,\n    label: '$10,000'\n  }];\n  return __jsx(\"div\", {\n    style: componentContainer\n  }, __jsx(\"h2\", {\n    style: {\n      marginTop: 0\n    }\n  }, \"Player Pool\"), __jsx(\"div\", {\n    style: cardContainer\n  }, positionCard(\"QB\"), positionCard(\"RB\"), positionCard(\"WR\"), positionCard(\"TE\"), positionCard(\"DST\"), positionCard(\"G\")));\n};\n\nexport default Pool;","map":null,"metadata":{},"sourceType":"module"}