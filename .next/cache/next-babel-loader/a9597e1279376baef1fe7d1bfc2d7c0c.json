{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar rosters = require('./rosters');\n\nvar convertPlayer = function convertPlayer(rawPlayer, positions) {\n  var draftableId = rawPlayer.draftableId,\n      salary = rawPlayer.salary,\n      position = rawPlayer.position,\n      projection = rawPlayer.projection,\n      ownership = rawPlayer.ownership,\n      startTime = rawPlayer.competition.startTime;\n  var playerPositions = position.split('/');\n  var primaryPosition = playerPositions.shift();\n  var player = positions[primaryPosition](projection, salary, ownership, new Date(startTime));\n  playerPositions.forEach(function (extraPosition) {\n    player[extraPosition] = 1;\n  });\n  player[draftableId] = 1;\n  return player;\n};\n\nvar convertPlayers = function convertPlayers(rawPlayers, rawProjections, sport, site, type) {\n  var positions = rosters[sport][site][type];\n  var projections = {};\n  rawProjections.forEach(function (rawProjection) {\n    var value = rawProjection.value,\n        ownership = rawProjection.ownership,\n        player = rawProjection.player;\n    projections[player] = {\n      value: value,\n      ownership: ownership\n    };\n  });\n  var players = {};\n  rawPlayers.forEach(function (rawPlayer) {\n    var draftableId = rawPlayer.draftableId; // Ignore players without a projection\n\n    if (!projections[draftableId]) {\n      return null;\n    }\n\n    var _projections$draftabl = projections[draftableId],\n        value = _projections$draftabl.value,\n        ownership = _projections$draftabl.ownership;\n\n    var player = _objectSpread({}, rawPlayer, {\n      ownership: ownership,\n      projection: value\n    });\n\n    players[draftableId] = convertPlayer(player, positions);\n  });\n  return players;\n};\n\nvar players = {\n  convertPlayers: convertPlayers\n};\nexport default players;\n/*\nmodule.exports = {\n  'Taysom Hill': positions.qb(1000, 1000, 100, new Date()),\n  'Matt Ryan': positions.qb(100, 10000, 100, new Date()),\n  'Drew Brees': positions.qb(100, 10000, 100, new Date()),\n  'David Blough': positions.qb(500, 500, 100, new Date()),\n  'Devin Singletary': positions.rb(1000, 10000, 100, new Date(3)),\n  'Zeke': positions.rb(1000, 1000, 100, new Date(2)),\n  'Kamara': positions.rb(100, 10000, 100, new Date()),\n  'David Montgomery': positions.rb(145, 3344, 50, new Date(1)),\n  'Bo': positions.rb(66, 8745, 50, new Date()),\n  'Kenny Golladay': positions.wr(1000, 1000, 100, new Date(10000)),\n  'Michael Thomas': positions.wr(100, 6780, 50, new Date()),\n  'Cole Beasley': positions.wr(10000, 10000, 100, new Date(0)),\n  'Anthony Miller': positions.wr(900, 6788, 50, new Date(54545454545454)),\n  'Russell Gage Jr': positions.wr(100, 100, 50, new Date()),\n  'Calvin Ridley': positions.wr(1000, 1000, 100, new Date(-1)),\n  'Julio Jones': positions.wr(0, 100, 50, new Date()),\n  'Dawson Knox': positions.te(5, 1000, 50, new Date()),\n  'Jason Whitten': positions.te(15, 1000, 50, new Date()),\n  'Jared Cook': positions.te(7, 1000, 50, new Date()),\n  'Jaedeanaean Graham': positions.te(25, 4500, 50, new Date()),\n  'Bears': positions.dst(5, 1000, 50, new Date()),\n  'Lions': positions.dst(5, 1000, 50, new Date()),\n  'Tigers': positions.dst(500, 1000, 100, new Date())\n}\n*/","map":{"version":3,"sources":["/Users/jwesto1/Code/jaw187/dfs-solver/solver/players.js"],"names":["rosters","require","convertPlayer","rawPlayer","positions","draftableId","salary","position","projection","ownership","startTime","competition","playerPositions","split","primaryPosition","shift","player","Date","forEach","extraPosition","convertPlayers","rawPlayers","rawProjections","sport","site","type","projections","rawProjection","value","players"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AAAA,MAE5CC,WAF4C,GAU1CF,SAV0C,CAE5CE,WAF4C;AAAA,MAG5CC,MAH4C,GAU1CH,SAV0C,CAG5CG,MAH4C;AAAA,MAI5CC,QAJ4C,GAU1CJ,SAV0C,CAI5CI,QAJ4C;AAAA,MAK5CC,UAL4C,GAU1CL,SAV0C,CAK5CK,UAL4C;AAAA,MAM5CC,SAN4C,GAU1CN,SAV0C,CAM5CM,SAN4C;AAAA,MAQ1CC,SAR0C,GAU1CP,SAV0C,CAO5CQ,WAP4C,CAQ1CD,SAR0C;AAY9C,MAAME,eAAe,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,CAAxB;AACA,MAAMC,eAAe,GAAGF,eAAe,CAACG,KAAhB,EAAxB;AAEA,MAAMC,MAAM,GAAGZ,SAAS,CAACU,eAAD,CAAT,CAA2BN,UAA3B,EAAuCF,MAAvC,EAA+CG,SAA/C,EAA0D,IAAIQ,IAAJ,CAASP,SAAT,CAA1D,CAAf;AACAE,EAAAA,eAAe,CAACM,OAAhB,CAAwB,UAACC,aAAD,EAAmB;AACzCH,IAAAA,MAAM,CAACG,aAAD,CAAN,GAAwB,CAAxB;AACD,GAFD;AAIAH,EAAAA,MAAM,CAACX,WAAD,CAAN,GAAsB,CAAtB;AAEA,SAAOW,MAAP;AACD,CAvBD;;AAyBA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAaC,cAAb,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAmD;AACxE,MAAMrB,SAAS,GAAGJ,OAAO,CAACuB,KAAD,CAAP,CAAeC,IAAf,EAAqBC,IAArB,CAAlB;AACA,MAAMC,WAAW,GAAG,EAApB;AACAJ,EAAAA,cAAc,CAACJ,OAAf,CAAuB,UAACS,aAAD,EAAmB;AAAA,QAChCC,KADgC,GACHD,aADG,CAChCC,KADgC;AAAA,QACzBnB,SADyB,GACHkB,aADG,CACzBlB,SADyB;AAAA,QACdO,MADc,GACHW,aADG,CACdX,MADc;AAGxCU,IAAAA,WAAW,CAACV,MAAD,CAAX,GAAsB;AACpBY,MAAAA,KAAK,EAALA,KADoB;AAEpBnB,MAAAA,SAAS,EAATA;AAFoB,KAAtB;AAID,GAPD;AASA,MAAMoB,OAAO,GAAG,EAAhB;AACAR,EAAAA,UAAU,CAACH,OAAX,CAAmB,UAACf,SAAD,EAAe;AAAA,QACxBE,WADwB,GACRF,SADQ,CACxBE,WADwB,EAEhC;;AACA,QAAI,CAACqB,WAAW,CAACrB,WAAD,CAAhB,EAA+B;AAC7B,aAAO,IAAP;AACD;;AAL+B,gCAMHqB,WAAW,CAACrB,WAAD,CANR;AAAA,QAMxBuB,KANwB,yBAMxBA,KANwB;AAAA,QAMjBnB,SANiB,yBAMjBA,SANiB;;AAQhC,QAAMO,MAAM,qBACPb,SADO;AAEVM,MAAAA,SAAS,EAATA,SAFU;AAGVD,MAAAA,UAAU,EAAEoB;AAHF,MAAZ;;AAMAC,IAAAA,OAAO,CAACxB,WAAD,CAAP,GAAuBH,aAAa,CAACc,MAAD,EAASZ,SAAT,CAApC;AACD,GAfD;AAiBA,SAAOyB,OAAP;AACD,CA/BD;;AAiCA,IAAMA,OAAO,GAAG;AACdT,EAAAA,cAAc,EAAdA;AADc,CAAhB;AAIA,eAAeS,OAAf;AACA","sourcesContent":["const rosters = require('./rosters');\n\nconst convertPlayer = (rawPlayer, positions) => {\n  const {\n    draftableId,\n    salary,\n    position,\n    projection,\n    ownership,\n    competition: {\n      startTime\n    }\n  } = rawPlayer;\n\n  const playerPositions = position.split('/');\n  const primaryPosition = playerPositions.shift();\n\n  const player = positions[primaryPosition](projection, salary, ownership, new Date(startTime));\n  playerPositions.forEach((extraPosition) => {\n    player[extraPosition] = 1;\n  });\n\n  player[draftableId] = 1;\n\n  return player;\n};\n\nconst convertPlayers = (rawPlayers, rawProjections, sport, site, type) => {\n  const positions = rosters[sport][site][type];\n  const projections = {};\n  rawProjections.forEach((rawProjection) => {\n    const { value, ownership, player } = rawProjection;\n\n    projections[player] = {\n      value,\n      ownership\n    };\n  });\n\n  const players = {};\n  rawPlayers.forEach((rawPlayer) => {\n    const { draftableId } = rawPlayer;\n    // Ignore players without a projection\n    if (!projections[draftableId]) {\n      return null;\n    }\n    const { value, ownership } = projections[draftableId];\n\n    const player = {\n      ...rawPlayer,\n      ownership,\n      projection: value\n    };\n\n    players[draftableId] = convertPlayer(player, positions);\n  });\n\n  return players;\n};\n\nconst players = {\n  convertPlayers\n};\n\nexport default players;\n/*\nmodule.exports = {\n  'Taysom Hill': positions.qb(1000, 1000, 100, new Date()),\n  'Matt Ryan': positions.qb(100, 10000, 100, new Date()),\n  'Drew Brees': positions.qb(100, 10000, 100, new Date()),\n  'David Blough': positions.qb(500, 500, 100, new Date()),\n  'Devin Singletary': positions.rb(1000, 10000, 100, new Date(3)),\n  'Zeke': positions.rb(1000, 1000, 100, new Date(2)),\n  'Kamara': positions.rb(100, 10000, 100, new Date()),\n  'David Montgomery': positions.rb(145, 3344, 50, new Date(1)),\n  'Bo': positions.rb(66, 8745, 50, new Date()),\n  'Kenny Golladay': positions.wr(1000, 1000, 100, new Date(10000)),\n  'Michael Thomas': positions.wr(100, 6780, 50, new Date()),\n  'Cole Beasley': positions.wr(10000, 10000, 100, new Date(0)),\n  'Anthony Miller': positions.wr(900, 6788, 50, new Date(54545454545454)),\n  'Russell Gage Jr': positions.wr(100, 100, 50, new Date()),\n  'Calvin Ridley': positions.wr(1000, 1000, 100, new Date(-1)),\n  'Julio Jones': positions.wr(0, 100, 50, new Date()),\n  'Dawson Knox': positions.te(5, 1000, 50, new Date()),\n  'Jason Whitten': positions.te(15, 1000, 50, new Date()),\n  'Jared Cook': positions.te(7, 1000, 50, new Date()),\n  'Jaedeanaean Graham': positions.te(25, 4500, 50, new Date()),\n  'Bears': positions.dst(5, 1000, 50, new Date()),\n  'Lions': positions.dst(5, 1000, 50, new Date()),\n  'Tigers': positions.dst(500, 1000, 100, new Date())\n}\n*/\n"]},"metadata":{},"sourceType":"module"}